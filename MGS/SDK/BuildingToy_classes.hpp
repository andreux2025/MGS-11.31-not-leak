#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BuildingToy

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BuildingToy.BuildingToy_C
// 0x0020 (0x0C98 - 0x0C78)
class ABuildingToy_C : public ABuildingTrapFloor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0C78(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFortMinigameProgressComponent*         FortMinigameProgress;                              // 0x0C80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UToyOptionsComponent_C*                 ToyOptionsComponent;                               // 0x0C88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsInvulnerableDuringMinigamePlay;                 // 0x0C90(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	bool                                          bPreviousInvulnerable;                             // 0x0C91(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsVisibleDuringMinigame;                          // 0x0C92(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BuildingToy(int32 EntryPoint);
	void On_Play_Mode_Changed(class AFortMinigame* Minigame, bool bIsInPlayMode);
	void BndEvt__FortMinigameProgress_K2Node_ComponentBoundEvent_2_OnMinigameAssignmentChanged__DelegateSignature(class AFortMinigame* Minigame);
	void OnMinigameEnded();
	void OnMinigameStarted();
	void ReceiveBeginPlay();
	void BndEvt__ToyOptionsComponent_K2Node_ComponentBoundEvent_1_AnyPropertyChangedDelegate__DelegateSignature();
	void BndEvt__ToyOptionsComponent_K2Node_ComponentBoundEvent_0_AnyPropertyChangedDelegate__DelegateSignature();
	bool BlueprintOnLocalInteract(class AFortPlayerPawn* InteractingPawn);
	void MinigameIsRunning(bool* GameIsRunning);
	void UpdateVisuals();
	void IsVisibleDuringMinigame(bool* IsVisibleDuringMinigame_0);
	void DesiredVisibility(bool* Visibility);
	void GetVisualComponents(TArray<class USceneComponent*>* Components);

	bool BlueprintCanInteract(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted) const;
	class FText BlueprintGetInteractionString(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BuildingToy_C">();
	}
	static class ABuildingToy_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABuildingToy_C>();
	}
};
static_assert(alignof(ABuildingToy_C) == 0x000008, "Wrong alignment on ABuildingToy_C");
static_assert(sizeof(ABuildingToy_C) == 0x000C98, "Wrong size on ABuildingToy_C");
static_assert(offsetof(ABuildingToy_C, UberGraphFrame) == 0x000C78, "Member 'ABuildingToy_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABuildingToy_C, FortMinigameProgress) == 0x000C80, "Member 'ABuildingToy_C::FortMinigameProgress' has a wrong offset!");
static_assert(offsetof(ABuildingToy_C, ToyOptionsComponent) == 0x000C88, "Member 'ABuildingToy_C::ToyOptionsComponent' has a wrong offset!");
static_assert(offsetof(ABuildingToy_C, bIsInvulnerableDuringMinigamePlay) == 0x000C90, "Member 'ABuildingToy_C::bIsInvulnerableDuringMinigamePlay' has a wrong offset!");
static_assert(offsetof(ABuildingToy_C, bPreviousInvulnerable) == 0x000C91, "Member 'ABuildingToy_C::bPreviousInvulnerable' has a wrong offset!");
static_assert(offsetof(ABuildingToy_C, bIsVisibleDuringMinigame) == 0x000C92, "Member 'ABuildingToy_C::bIsVisibleDuringMinigame' has a wrong offset!");

}

