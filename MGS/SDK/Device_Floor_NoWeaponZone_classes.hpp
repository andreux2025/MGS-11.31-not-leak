#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Device_Floor_NoWeaponZone

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "Device_Volume_Floor_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Device_Floor_NoWeaponZone.Device_Floor_NoWeaponZone_C
// 0x0090 (0x0DD8 - 0x0D48)
class ADevice_Floor_NoWeaponZone_C : public ADevice_Volume_Floor_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Device_Floor_NoWeaponZone_C;        // 0x0D48(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFortGameplayTriggerMessageComponent*   TransmitOnEmoteEnded;                              // 0x0D50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortGameplayTriggerMessageComponent*   TransmitOnEmoteStarted;                            // 0x0D58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortGameplayTriggerMessageComponent*   TransmitOnLeaving;                                 // 0x0D60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortGameplayTriggerMessageComponent*   TransmitOnEntering;                                // 0x0D68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               idleFX;                                            // 0x0D70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Bounds;                                            // 0x0D78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         ParticlesMaxDrawDistance;                          // 0x0D80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D84[0x4];                                      // 0x0D84(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CancelAbilitiesWithTheseTags;                      // 0x0D88(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AActor*                                 ApplyEffectToActor;                                // 0x0DA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBuildingMode                                 AllowBuilding;                                     // 0x0DB0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DB1[0x7];                                      // 0x0DB1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 Effect_Class;                                      // 0x0DB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           TagDisableBuild;                                   // 0x0DC0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           TagDisableFire;                                    // 0x0DC8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Knob_bAllowFiring;                                 // 0x0DD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_Device_Floor_NoWeaponZone(int32 EntryPoint);
	void OnPlayerEmoteStarted(class AFortPawn* PlayerEmoting);
	void OnPlayerEmoteEnded(class AFortPawn* PlayerEmoting);
	void OnAbilitySystemComponentInitialized(class UFortAbilitySystemComponent* AbilitySystemComponent_0, class AFortPlayerPawn* AffectedPawn);
	void PlayFX(class AFortPawn* Overlapped_Pawn);
	void BndEvt__Trigger_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__Trigger_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void UpdateMinigameVisuals();
	void UpdateVolumeSize();
	void UserConstructionScript();
	void GetAbilitySystemComponentAndPawn(class UObject* Object, class UFortAbilitySystemComponent** AsFort_Ability_System_Component, class AFortPawn** AsFort_Pawn);
	void ApplyEffects(class UObject* Object, bool* AbilitySystemComponentValid, class AFortPawn** As_Fort_Pawn, bool* IsValidTarget);
	void ShouldAffectTarget(class AActor* TargetActor, bool* ShouldAffect);
	void Setup_Effect_Data(class UAbilitySystemComponent* Ability_System, bool* Should_Apply, struct FGameplayEffectSpecHandle* Spec_Handle);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Device_Floor_NoWeaponZone_C">();
	}
	static class ADevice_Floor_NoWeaponZone_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADevice_Floor_NoWeaponZone_C>();
	}
};
static_assert(alignof(ADevice_Floor_NoWeaponZone_C) == 0x000008, "Wrong alignment on ADevice_Floor_NoWeaponZone_C");
static_assert(sizeof(ADevice_Floor_NoWeaponZone_C) == 0x000DD8, "Wrong size on ADevice_Floor_NoWeaponZone_C");
static_assert(offsetof(ADevice_Floor_NoWeaponZone_C, UberGraphFrame_Device_Floor_NoWeaponZone_C) == 0x000D48, "Member 'ADevice_Floor_NoWeaponZone_C::UberGraphFrame_Device_Floor_NoWeaponZone_C' has a wrong offset!");
static_assert(offsetof(ADevice_Floor_NoWeaponZone_C, TransmitOnEmoteEnded) == 0x000D50, "Member 'ADevice_Floor_NoWeaponZone_C::TransmitOnEmoteEnded' has a wrong offset!");
static_assert(offsetof(ADevice_Floor_NoWeaponZone_C, TransmitOnEmoteStarted) == 0x000D58, "Member 'ADevice_Floor_NoWeaponZone_C::TransmitOnEmoteStarted' has a wrong offset!");
static_assert(offsetof(ADevice_Floor_NoWeaponZone_C, TransmitOnLeaving) == 0x000D60, "Member 'ADevice_Floor_NoWeaponZone_C::TransmitOnLeaving' has a wrong offset!");
static_assert(offsetof(ADevice_Floor_NoWeaponZone_C, TransmitOnEntering) == 0x000D68, "Member 'ADevice_Floor_NoWeaponZone_C::TransmitOnEntering' has a wrong offset!");
static_assert(offsetof(ADevice_Floor_NoWeaponZone_C, idleFX) == 0x000D70, "Member 'ADevice_Floor_NoWeaponZone_C::idleFX' has a wrong offset!");
static_assert(offsetof(ADevice_Floor_NoWeaponZone_C, Bounds) == 0x000D78, "Member 'ADevice_Floor_NoWeaponZone_C::Bounds' has a wrong offset!");
static_assert(offsetof(ADevice_Floor_NoWeaponZone_C, ParticlesMaxDrawDistance) == 0x000D80, "Member 'ADevice_Floor_NoWeaponZone_C::ParticlesMaxDrawDistance' has a wrong offset!");
static_assert(offsetof(ADevice_Floor_NoWeaponZone_C, CancelAbilitiesWithTheseTags) == 0x000D88, "Member 'ADevice_Floor_NoWeaponZone_C::CancelAbilitiesWithTheseTags' has a wrong offset!");
static_assert(offsetof(ADevice_Floor_NoWeaponZone_C, ApplyEffectToActor) == 0x000DA8, "Member 'ADevice_Floor_NoWeaponZone_C::ApplyEffectToActor' has a wrong offset!");
static_assert(offsetof(ADevice_Floor_NoWeaponZone_C, AllowBuilding) == 0x000DB0, "Member 'ADevice_Floor_NoWeaponZone_C::AllowBuilding' has a wrong offset!");
static_assert(offsetof(ADevice_Floor_NoWeaponZone_C, Effect_Class) == 0x000DB8, "Member 'ADevice_Floor_NoWeaponZone_C::Effect_Class' has a wrong offset!");
static_assert(offsetof(ADevice_Floor_NoWeaponZone_C, TagDisableBuild) == 0x000DC0, "Member 'ADevice_Floor_NoWeaponZone_C::TagDisableBuild' has a wrong offset!");
static_assert(offsetof(ADevice_Floor_NoWeaponZone_C, TagDisableFire) == 0x000DC8, "Member 'ADevice_Floor_NoWeaponZone_C::TagDisableFire' has a wrong offset!");
static_assert(offsetof(ADevice_Floor_NoWeaponZone_C, Knob_bAllowFiring) == 0x000DD0, "Member 'ADevice_Floor_NoWeaponZone_C::Knob_bAllowFiring' has a wrong offset!");

}

