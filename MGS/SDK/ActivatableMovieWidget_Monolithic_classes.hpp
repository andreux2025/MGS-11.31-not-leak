#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ActivatableMovieWidget_Monolithic

#include "Basic.hpp"

#include "FortniteUI_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass ActivatableMovieWidget_Monolithic.ActivatableMovieWidget_Monolithic_C
// 0x00A0 (0x0568 - 0x04C8)
class UActivatableMovieWidget_Monolithic_C final : public UFortActivatableVideoPanel
{
public:
	class USafeZone*                              MainSafeZone;                                      // 0x04C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          IsAutoplay;                                        // 0x04D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D1[0x7];                                      // 0x04D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StreamedVideoError;                                // 0x04D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          StreamedVideoOpenError;                            // 0x04E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E9[0x7];                                      // 0x04E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortStreamMediaSource*                 ElectraMediaSource;                                // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMediaPlayer*                           StreamedMediaPlayer;                               // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           StreamedVideoOpeningTimer;                         // 0x0500(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   StreamingVideoID;                                  // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   FallbackVideoID;                                   // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FallbackExists;                                    // 0x0518(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_519[0x7];                                      // 0x0519(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ProdLinkID;                                        // 0x0520(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 GameDevLinkID;                                     // 0x0530(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          UseLinkIDs;                                        // 0x0540(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_541[0x3];                                      // 0x0541(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   VideoString;                                       // 0x0544(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseFlatMetadataByUID;                              // 0x054C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54D[0x3];                                      // 0x054D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 VideoUID;                                          // 0x0550(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bShouldBeModal;                                    // 0x0560(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void LoadFallbackVideo();
	void StreamedVideoOnError();
	void StreamedVideoOnOpenFailure(const class FString& URL);
	void StreamedVideoOnUrlFailure(const class FString& URL);
	void StreamedVideoOnUrlSuccess(const class FString& URL);
	void StreamedVideoOnMediaOpened(const class FString& URL);
	void StreamedVideoOnSkipButtonClicked();
	void StreamedVideoOnMediaPlayerEndReached();
	void StreamedVideoOpeningTimedOut();
	void StreamedVideoOnSkipBeforeVideoURLReceived();
	void ModifyStreamSourceTemplate();
	void LoadStreamingVideo(class UFortStreamMediaSource* StreamingMediaSource, class FName VideoString_0, class FName StreamingVideoID_0, class FName FallbackVideoID_0, const class FString& ProdLinkID_0, const class FString& GameDevLinkID_0, bool IsAutoplay_0, bool ForceAutoplay, bool StreamingEnabled, const class FString& VideoUID_0, bool* NoAutoPlay, class UFortStreamMediaSource** MediaSource);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ActivatableMovieWidget_Monolithic_C">();
	}
	static class UActivatableMovieWidget_Monolithic_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActivatableMovieWidget_Monolithic_C>();
	}
};
static_assert(alignof(UActivatableMovieWidget_Monolithic_C) == 0x000008, "Wrong alignment on UActivatableMovieWidget_Monolithic_C");
static_assert(sizeof(UActivatableMovieWidget_Monolithic_C) == 0x000568, "Wrong size on UActivatableMovieWidget_Monolithic_C");
static_assert(offsetof(UActivatableMovieWidget_Monolithic_C, MainSafeZone) == 0x0004C8, "Member 'UActivatableMovieWidget_Monolithic_C::MainSafeZone' has a wrong offset!");
static_assert(offsetof(UActivatableMovieWidget_Monolithic_C, IsAutoplay) == 0x0004D0, "Member 'UActivatableMovieWidget_Monolithic_C::IsAutoplay' has a wrong offset!");
static_assert(offsetof(UActivatableMovieWidget_Monolithic_C, StreamedVideoError) == 0x0004D8, "Member 'UActivatableMovieWidget_Monolithic_C::StreamedVideoError' has a wrong offset!");
static_assert(offsetof(UActivatableMovieWidget_Monolithic_C, StreamedVideoOpenError) == 0x0004E8, "Member 'UActivatableMovieWidget_Monolithic_C::StreamedVideoOpenError' has a wrong offset!");
static_assert(offsetof(UActivatableMovieWidget_Monolithic_C, ElectraMediaSource) == 0x0004F0, "Member 'UActivatableMovieWidget_Monolithic_C::ElectraMediaSource' has a wrong offset!");
static_assert(offsetof(UActivatableMovieWidget_Monolithic_C, StreamedMediaPlayer) == 0x0004F8, "Member 'UActivatableMovieWidget_Monolithic_C::StreamedMediaPlayer' has a wrong offset!");
static_assert(offsetof(UActivatableMovieWidget_Monolithic_C, StreamedVideoOpeningTimer) == 0x000500, "Member 'UActivatableMovieWidget_Monolithic_C::StreamedVideoOpeningTimer' has a wrong offset!");
static_assert(offsetof(UActivatableMovieWidget_Monolithic_C, StreamingVideoID) == 0x000508, "Member 'UActivatableMovieWidget_Monolithic_C::StreamingVideoID' has a wrong offset!");
static_assert(offsetof(UActivatableMovieWidget_Monolithic_C, FallbackVideoID) == 0x000510, "Member 'UActivatableMovieWidget_Monolithic_C::FallbackVideoID' has a wrong offset!");
static_assert(offsetof(UActivatableMovieWidget_Monolithic_C, FallbackExists) == 0x000518, "Member 'UActivatableMovieWidget_Monolithic_C::FallbackExists' has a wrong offset!");
static_assert(offsetof(UActivatableMovieWidget_Monolithic_C, ProdLinkID) == 0x000520, "Member 'UActivatableMovieWidget_Monolithic_C::ProdLinkID' has a wrong offset!");
static_assert(offsetof(UActivatableMovieWidget_Monolithic_C, GameDevLinkID) == 0x000530, "Member 'UActivatableMovieWidget_Monolithic_C::GameDevLinkID' has a wrong offset!");
static_assert(offsetof(UActivatableMovieWidget_Monolithic_C, UseLinkIDs) == 0x000540, "Member 'UActivatableMovieWidget_Monolithic_C::UseLinkIDs' has a wrong offset!");
static_assert(offsetof(UActivatableMovieWidget_Monolithic_C, VideoString) == 0x000544, "Member 'UActivatableMovieWidget_Monolithic_C::VideoString' has a wrong offset!");
static_assert(offsetof(UActivatableMovieWidget_Monolithic_C, UseFlatMetadataByUID) == 0x00054C, "Member 'UActivatableMovieWidget_Monolithic_C::UseFlatMetadataByUID' has a wrong offset!");
static_assert(offsetof(UActivatableMovieWidget_Monolithic_C, VideoUID) == 0x000550, "Member 'UActivatableMovieWidget_Monolithic_C::VideoUID' has a wrong offset!");
static_assert(offsetof(UActivatableMovieWidget_Monolithic_C, bShouldBeModal) == 0x000560, "Member 'UActivatableMovieWidget_Monolithic_C::bShouldBeModal' has a wrong offset!");

}

