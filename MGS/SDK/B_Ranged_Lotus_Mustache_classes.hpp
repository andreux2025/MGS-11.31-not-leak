#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Ranged_Lotus_Mustache

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "B_Ranged_Generic_Athena_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_Ranged_Lotus_Mustache.B_Ranged_Lotus_Mustache_C
// 0x00D0 (0x0FD8 - 0x0F08)
class AB_Ranged_Lotus_Mustache_C final : public AB_Ranged_Generic_Athena_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_B_Ranged_Lotus_Mustache_C;          // 0x0F08(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         Timeline_1_NewTrack_0_8351400740E359EACF6851AB2B2BF762; // 0x0F10(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_1__Direction_8351400740E359EACF6851AB2B2BF762; // 0x0F14(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F15[0x3];                                      // 0x0F15(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_1;                                        // 0x0F18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_NewTrack_0_1366F380457842955A635D98E5E62F34; // 0x0F20(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_1366F380457842955A635D98E5E62F34; // 0x0F24(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F25[0x3];                                      // 0x0F25(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x0F28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    DataRow;                                           // 0x0F30(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FLinearColor                           Screen_Full_Color__Material_;                      // 0x0F40(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Screen_Empty_Color__Material_;                     // 0x0F50(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Test_AmmoClipMax;                                  // 0x0F60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Screen_Empty_Color__Light_;                        // 0x0F64(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Screen_Full_Color__Light_;                         // 0x0F74(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanPlay_;                                          // 0x0F84(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F85[0x3];                                      // 0x0F85(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LockOnTarget;                                      // 0x0F88(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurnSpeedMax;                                      // 0x0F90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HomingDistanceThreshold;                           // 0x0F94(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeUntilMax;                                      // 0x0F98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9C[0x4];                                      // 0x0F9C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULotus_Mustache_HealthBar_C*            LockOnWidget;                                      // 0x0FA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAthena_LockOnWidgetActor_Proto_C*      WidgetActor;                                       // 0x0FA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HealthPercent;                                     // 0x0FB0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxTime;                                           // 0x0FB4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         ShouldSpawnBandages;                               // 0x0FB8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_B_Ranged_Lotus_Mustache(int32 EntryPoint);
	void SetHealthPercentClient(float HealthPercent_0);
	void SetHealthPercentServer();
	void NewTarget();
	void ReceiveTick(float DeltaSeconds);
	void OnSpawnProjectile(class AFortProjectileBase* SpawnProjectile);
	void Timeline_0__FinishedFunc();
	void Timeline_0__UpdateFunc();
	void Timeline_1__FinishedFunc();
	void Timeline_1__UpdateFunc();
	void OnPlayWeaponFireFX(bool bPersistentFire, bool bSecondaryFire);
	void K2_OnUnEquip();
	void OnWeaponAttached();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_Ranged_Lotus_Mustache_C">();
	}
	static class AB_Ranged_Lotus_Mustache_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_Ranged_Lotus_Mustache_C>();
	}
};
static_assert(alignof(AB_Ranged_Lotus_Mustache_C) == 0x000008, "Wrong alignment on AB_Ranged_Lotus_Mustache_C");
static_assert(sizeof(AB_Ranged_Lotus_Mustache_C) == 0x000FD8, "Wrong size on AB_Ranged_Lotus_Mustache_C");
static_assert(offsetof(AB_Ranged_Lotus_Mustache_C, UberGraphFrame_B_Ranged_Lotus_Mustache_C) == 0x000F08, "Member 'AB_Ranged_Lotus_Mustache_C::UberGraphFrame_B_Ranged_Lotus_Mustache_C' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Lotus_Mustache_C, Timeline_1_NewTrack_0_8351400740E359EACF6851AB2B2BF762) == 0x000F10, "Member 'AB_Ranged_Lotus_Mustache_C::Timeline_1_NewTrack_0_8351400740E359EACF6851AB2B2BF762' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Lotus_Mustache_C, Timeline_1__Direction_8351400740E359EACF6851AB2B2BF762) == 0x000F14, "Member 'AB_Ranged_Lotus_Mustache_C::Timeline_1__Direction_8351400740E359EACF6851AB2B2BF762' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Lotus_Mustache_C, Timeline_1) == 0x000F18, "Member 'AB_Ranged_Lotus_Mustache_C::Timeline_1' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Lotus_Mustache_C, Timeline_0_NewTrack_0_1366F380457842955A635D98E5E62F34) == 0x000F20, "Member 'AB_Ranged_Lotus_Mustache_C::Timeline_0_NewTrack_0_1366F380457842955A635D98E5E62F34' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Lotus_Mustache_C, Timeline_0__Direction_1366F380457842955A635D98E5E62F34) == 0x000F24, "Member 'AB_Ranged_Lotus_Mustache_C::Timeline_0__Direction_1366F380457842955A635D98E5E62F34' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Lotus_Mustache_C, Timeline_0) == 0x000F28, "Member 'AB_Ranged_Lotus_Mustache_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Lotus_Mustache_C, DataRow) == 0x000F30, "Member 'AB_Ranged_Lotus_Mustache_C::DataRow' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Lotus_Mustache_C, Screen_Full_Color__Material_) == 0x000F40, "Member 'AB_Ranged_Lotus_Mustache_C::Screen_Full_Color__Material_' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Lotus_Mustache_C, Screen_Empty_Color__Material_) == 0x000F50, "Member 'AB_Ranged_Lotus_Mustache_C::Screen_Empty_Color__Material_' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Lotus_Mustache_C, Test_AmmoClipMax) == 0x000F60, "Member 'AB_Ranged_Lotus_Mustache_C::Test_AmmoClipMax' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Lotus_Mustache_C, Screen_Empty_Color__Light_) == 0x000F64, "Member 'AB_Ranged_Lotus_Mustache_C::Screen_Empty_Color__Light_' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Lotus_Mustache_C, Screen_Full_Color__Light_) == 0x000F74, "Member 'AB_Ranged_Lotus_Mustache_C::Screen_Full_Color__Light_' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Lotus_Mustache_C, CanPlay_) == 0x000F84, "Member 'AB_Ranged_Lotus_Mustache_C::CanPlay_' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Lotus_Mustache_C, LockOnTarget) == 0x000F88, "Member 'AB_Ranged_Lotus_Mustache_C::LockOnTarget' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Lotus_Mustache_C, TurnSpeedMax) == 0x000F90, "Member 'AB_Ranged_Lotus_Mustache_C::TurnSpeedMax' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Lotus_Mustache_C, HomingDistanceThreshold) == 0x000F94, "Member 'AB_Ranged_Lotus_Mustache_C::HomingDistanceThreshold' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Lotus_Mustache_C, TimeUntilMax) == 0x000F98, "Member 'AB_Ranged_Lotus_Mustache_C::TimeUntilMax' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Lotus_Mustache_C, LockOnWidget) == 0x000FA0, "Member 'AB_Ranged_Lotus_Mustache_C::LockOnWidget' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Lotus_Mustache_C, WidgetActor) == 0x000FA8, "Member 'AB_Ranged_Lotus_Mustache_C::WidgetActor' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Lotus_Mustache_C, HealthPercent) == 0x000FB0, "Member 'AB_Ranged_Lotus_Mustache_C::HealthPercent' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Lotus_Mustache_C, MaxTime) == 0x000FB4, "Member 'AB_Ranged_Lotus_Mustache_C::MaxTime' has a wrong offset!");
static_assert(offsetof(AB_Ranged_Lotus_Mustache_C, ShouldSpawnBandages) == 0x000FB8, "Member 'AB_Ranged_Lotus_Mustache_C::ShouldSpawnBandages' has a wrong offset!");

}

