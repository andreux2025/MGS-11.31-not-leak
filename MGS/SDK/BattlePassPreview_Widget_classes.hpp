#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BattlePassPreview_Widget

#include "Basic.hpp"

#include "FortniteUI_classes.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BattlePassPreview_Widget.BattlePassPreview_Widget_C
// 0x0150 (0x0CE8 - 0x0B98)
class UBattlePassPreview_Widget_C final : public UBattlePassScreenPreviewRewardWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0B98(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       PlayRenderSwap;                                    // 0x0BA0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       UnlockSequence;                                    // 0x0BA8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       ReadyToUnlockText;                                 // 0x0BB0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       FadeDisabledState;                                 // 0x0BB8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       TextOut;                                           // 0x0BC0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       TextIn;                                            // 0x0BC8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       OnHover;                                           // 0x0BD0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 HitTest_Area;                                      // 0x0BD8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       Level;                                             // 0x0BE0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Lock;                                              // 0x0BE8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           Locked;                                            // 0x0BF0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       LockedText;                                        // 0x0BF8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        ProgressIndicationVbuckAmount;                     // 0x0C00(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         ReadyToUnlock;                                     // 0x0C08(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           RewardLevel_Indicator;                             // 0x0C10(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Shadow;                                            // 0x0C18(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       SubText;                                           // 0x0C20(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                TintClaimText;                                     // 0x0C28(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Unlocked;                                          // 0x0C30(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VBucks_Indicator;                                  // 0x0C38(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTexture*                               LoadedSecondaryTexture;                            // 0x0C40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UTexture*                               LoadedPrimaryTexture;                              // 0x0C48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         IsBPIcon;                                          // 0x0C50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         IsLeft;                                            // 0x0C54(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         IsRight;                                           // 0x0C58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         FillSize;                                          // 0x0C5C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            ItemName_RGBA;                                     // 0x0C60(0x0028)(Edit, BlueprintVisible, ExposeOnSpawn)
	struct FSlateColor                            Subtext_RGBA;                                      // 0x0C88(0x0028)(Edit, BlueprintVisible)
	bool                                          bPlayTextAnim;                                     // 0x0CB0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CB1[0x3];                                      // 0x0CB1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TextureAlpha;                                      // 0x0CB4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         TimeOffset;                                        // 0x0CB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         UseRenderSwap;                                     // 0x0CBC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bIsHovered;                                        // 0x0CC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsReadyToUnlock;                                   // 0x0CC1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CC2[0x2];                                      // 0x0CC2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Level_RGBA;                                        // 0x0CC4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ClaimText_RGBA;                                    // 0x0CD4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Unhover();
	void RenderSwap();
	void RefreshVisuals();
	void OnMouseLeave(const struct FPointerEvent& MouseEvent);
	void OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void Hovered();
	void Construct();
	void PreConstruct(bool IsDesignTime);
	void OnSetDataForCharacter(bool bIsReadyToUnlock, float LayoutPosition);
	void OnSetDataForCurrency(float LayoutPosition);
	void ExecuteUbergraph_BattlePassPreview_Widget(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BattlePassPreview_Widget_C">();
	}
	static class UBattlePassPreview_Widget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBattlePassPreview_Widget_C>();
	}
};
static_assert(alignof(UBattlePassPreview_Widget_C) == 0x000008, "Wrong alignment on UBattlePassPreview_Widget_C");
static_assert(sizeof(UBattlePassPreview_Widget_C) == 0x000CE8, "Wrong size on UBattlePassPreview_Widget_C");
static_assert(offsetof(UBattlePassPreview_Widget_C, UberGraphFrame) == 0x000B98, "Member 'UBattlePassPreview_Widget_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBattlePassPreview_Widget_C, PlayRenderSwap) == 0x000BA0, "Member 'UBattlePassPreview_Widget_C::PlayRenderSwap' has a wrong offset!");
static_assert(offsetof(UBattlePassPreview_Widget_C, UnlockSequence) == 0x000BA8, "Member 'UBattlePassPreview_Widget_C::UnlockSequence' has a wrong offset!");
static_assert(offsetof(UBattlePassPreview_Widget_C, ReadyToUnlockText) == 0x000BB0, "Member 'UBattlePassPreview_Widget_C::ReadyToUnlockText' has a wrong offset!");
static_assert(offsetof(UBattlePassPreview_Widget_C, FadeDisabledState) == 0x000BB8, "Member 'UBattlePassPreview_Widget_C::FadeDisabledState' has a wrong offset!");
static_assert(offsetof(UBattlePassPreview_Widget_C, TextOut) == 0x000BC0, "Member 'UBattlePassPreview_Widget_C::TextOut' has a wrong offset!");
static_assert(offsetof(UBattlePassPreview_Widget_C, TextIn) == 0x000BC8, "Member 'UBattlePassPreview_Widget_C::TextIn' has a wrong offset!");
static_assert(offsetof(UBattlePassPreview_Widget_C, OnHover) == 0x000BD0, "Member 'UBattlePassPreview_Widget_C::OnHover' has a wrong offset!");
static_assert(offsetof(UBattlePassPreview_Widget_C, HitTest_Area) == 0x000BD8, "Member 'UBattlePassPreview_Widget_C::HitTest_Area' has a wrong offset!");
static_assert(offsetof(UBattlePassPreview_Widget_C, Level) == 0x000BE0, "Member 'UBattlePassPreview_Widget_C::Level' has a wrong offset!");
static_assert(offsetof(UBattlePassPreview_Widget_C, Lock) == 0x000BE8, "Member 'UBattlePassPreview_Widget_C::Lock' has a wrong offset!");
static_assert(offsetof(UBattlePassPreview_Widget_C, Locked) == 0x000BF0, "Member 'UBattlePassPreview_Widget_C::Locked' has a wrong offset!");
static_assert(offsetof(UBattlePassPreview_Widget_C, LockedText) == 0x000BF8, "Member 'UBattlePassPreview_Widget_C::LockedText' has a wrong offset!");
static_assert(offsetof(UBattlePassPreview_Widget_C, ProgressIndicationVbuckAmount) == 0x000C00, "Member 'UBattlePassPreview_Widget_C::ProgressIndicationVbuckAmount' has a wrong offset!");
static_assert(offsetof(UBattlePassPreview_Widget_C, ReadyToUnlock) == 0x000C08, "Member 'UBattlePassPreview_Widget_C::ReadyToUnlock' has a wrong offset!");
static_assert(offsetof(UBattlePassPreview_Widget_C, RewardLevel_Indicator) == 0x000C10, "Member 'UBattlePassPreview_Widget_C::RewardLevel_Indicator' has a wrong offset!");
static_assert(offsetof(UBattlePassPreview_Widget_C, Shadow) == 0x000C18, "Member 'UBattlePassPreview_Widget_C::Shadow' has a wrong offset!");
static_assert(offsetof(UBattlePassPreview_Widget_C, SubText) == 0x000C20, "Member 'UBattlePassPreview_Widget_C::SubText' has a wrong offset!");
static_assert(offsetof(UBattlePassPreview_Widget_C, TintClaimText) == 0x000C28, "Member 'UBattlePassPreview_Widget_C::TintClaimText' has a wrong offset!");
static_assert(offsetof(UBattlePassPreview_Widget_C, Unlocked) == 0x000C30, "Member 'UBattlePassPreview_Widget_C::Unlocked' has a wrong offset!");
static_assert(offsetof(UBattlePassPreview_Widget_C, VBucks_Indicator) == 0x000C38, "Member 'UBattlePassPreview_Widget_C::VBucks_Indicator' has a wrong offset!");
static_assert(offsetof(UBattlePassPreview_Widget_C, LoadedSecondaryTexture) == 0x000C40, "Member 'UBattlePassPreview_Widget_C::LoadedSecondaryTexture' has a wrong offset!");
static_assert(offsetof(UBattlePassPreview_Widget_C, LoadedPrimaryTexture) == 0x000C48, "Member 'UBattlePassPreview_Widget_C::LoadedPrimaryTexture' has a wrong offset!");
static_assert(offsetof(UBattlePassPreview_Widget_C, IsBPIcon) == 0x000C50, "Member 'UBattlePassPreview_Widget_C::IsBPIcon' has a wrong offset!");
static_assert(offsetof(UBattlePassPreview_Widget_C, IsLeft) == 0x000C54, "Member 'UBattlePassPreview_Widget_C::IsLeft' has a wrong offset!");
static_assert(offsetof(UBattlePassPreview_Widget_C, IsRight) == 0x000C58, "Member 'UBattlePassPreview_Widget_C::IsRight' has a wrong offset!");
static_assert(offsetof(UBattlePassPreview_Widget_C, FillSize) == 0x000C5C, "Member 'UBattlePassPreview_Widget_C::FillSize' has a wrong offset!");
static_assert(offsetof(UBattlePassPreview_Widget_C, ItemName_RGBA) == 0x000C60, "Member 'UBattlePassPreview_Widget_C::ItemName_RGBA' has a wrong offset!");
static_assert(offsetof(UBattlePassPreview_Widget_C, Subtext_RGBA) == 0x000C88, "Member 'UBattlePassPreview_Widget_C::Subtext_RGBA' has a wrong offset!");
static_assert(offsetof(UBattlePassPreview_Widget_C, bPlayTextAnim) == 0x000CB0, "Member 'UBattlePassPreview_Widget_C::bPlayTextAnim' has a wrong offset!");
static_assert(offsetof(UBattlePassPreview_Widget_C, TextureAlpha) == 0x000CB4, "Member 'UBattlePassPreview_Widget_C::TextureAlpha' has a wrong offset!");
static_assert(offsetof(UBattlePassPreview_Widget_C, TimeOffset) == 0x000CB8, "Member 'UBattlePassPreview_Widget_C::TimeOffset' has a wrong offset!");
static_assert(offsetof(UBattlePassPreview_Widget_C, UseRenderSwap) == 0x000CBC, "Member 'UBattlePassPreview_Widget_C::UseRenderSwap' has a wrong offset!");
static_assert(offsetof(UBattlePassPreview_Widget_C, bIsHovered) == 0x000CC0, "Member 'UBattlePassPreview_Widget_C::bIsHovered' has a wrong offset!");
static_assert(offsetof(UBattlePassPreview_Widget_C, IsReadyToUnlock) == 0x000CC1, "Member 'UBattlePassPreview_Widget_C::IsReadyToUnlock' has a wrong offset!");
static_assert(offsetof(UBattlePassPreview_Widget_C, Level_RGBA) == 0x000CC4, "Member 'UBattlePassPreview_Widget_C::Level_RGBA' has a wrong offset!");
static_assert(offsetof(UBattlePassPreview_Widget_C, ClaimText_RGBA) == 0x000CD4, "Member 'UBattlePassPreview_Widget_C::ClaimText_RGBA' has a wrong offset!");

}

