#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BattlePassPreview

#include "Basic.hpp"

#include "FortniteUI_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function BattlePassPreview.BattlePassPreview_C.CallRenderSwapOnBlade
// 0x0018 (0x0018 - 0x0000)
struct BattlePassPreview_C_CallRenderSwapOnBlade final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBattlePassPreview_Widget_C*            K2Node_DynamicCast_AsBattle_Pass_Preview_Widget;   // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattlePassPreview_C_CallRenderSwapOnBlade) == 0x000008, "Wrong alignment on BattlePassPreview_C_CallRenderSwapOnBlade");
static_assert(sizeof(BattlePassPreview_C_CallRenderSwapOnBlade) == 0x000018, "Wrong size on BattlePassPreview_C_CallRenderSwapOnBlade");
static_assert(offsetof(BattlePassPreview_C_CallRenderSwapOnBlade, Object) == 0x000000, "Member 'BattlePassPreview_C_CallRenderSwapOnBlade::Object' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_CallRenderSwapOnBlade, K2Node_DynamicCast_AsBattle_Pass_Preview_Widget) == 0x000008, "Member 'BattlePassPreview_C_CallRenderSwapOnBlade::K2Node_DynamicCast_AsBattle_Pass_Preview_Widget' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_CallRenderSwapOnBlade, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BattlePassPreview_C_CallRenderSwapOnBlade::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BattlePassPreview.BattlePassPreview_C.SetRotatingPreviewData
// 0x00F8 (0x00F8 - 0x0000)
struct BattlePassPreview_C_SetRotatingPreviewData final
{
public:
	class UFortItem*                              ItemToDisplay;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReadyToUnlock;                                     // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LevelUnlocked;                                     // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Temp_text_Variable;                                // 0x0010(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0028(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0068(0x0010)(ZeroConstructor, ReferenceParm)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0080(0x0018)()
	class FText                                   CallFunc_GetDisplayName_ReturnValue;               // 0x0098(0x0018)()
	TSoftObjectPtr<class UTexture2D>              CallFunc_GetSmallPreviewImage_ReturnValue;         // 0x00B0(0x0028)(HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x00E0(0x0018)()
};
static_assert(alignof(BattlePassPreview_C_SetRotatingPreviewData) == 0x000008, "Wrong alignment on BattlePassPreview_C_SetRotatingPreviewData");
static_assert(sizeof(BattlePassPreview_C_SetRotatingPreviewData) == 0x0000F8, "Wrong size on BattlePassPreview_C_SetRotatingPreviewData");
static_assert(offsetof(BattlePassPreview_C_SetRotatingPreviewData, ItemToDisplay) == 0x000000, "Member 'BattlePassPreview_C_SetRotatingPreviewData::ItemToDisplay' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_SetRotatingPreviewData, ReadyToUnlock) == 0x000008, "Member 'BattlePassPreview_C_SetRotatingPreviewData::ReadyToUnlock' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_SetRotatingPreviewData, LevelUnlocked) == 0x00000C, "Member 'BattlePassPreview_C_SetRotatingPreviewData::LevelUnlocked' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_SetRotatingPreviewData, Temp_text_Variable) == 0x000010, "Member 'BattlePassPreview_C_SetRotatingPreviewData::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_SetRotatingPreviewData, K2Node_MakeStruct_FormatArgumentData) == 0x000028, "Member 'BattlePassPreview_C_SetRotatingPreviewData::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_SetRotatingPreviewData, K2Node_MakeArray_Array) == 0x000068, "Member 'BattlePassPreview_C_SetRotatingPreviewData::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_SetRotatingPreviewData, CallFunc_IsValid_ReturnValue) == 0x000078, "Member 'BattlePassPreview_C_SetRotatingPreviewData::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_SetRotatingPreviewData, CallFunc_Format_ReturnValue) == 0x000080, "Member 'BattlePassPreview_C_SetRotatingPreviewData::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_SetRotatingPreviewData, CallFunc_GetDisplayName_ReturnValue) == 0x000098, "Member 'BattlePassPreview_C_SetRotatingPreviewData::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_SetRotatingPreviewData, CallFunc_GetSmallPreviewImage_ReturnValue) == 0x0000B0, "Member 'BattlePassPreview_C_SetRotatingPreviewData::CallFunc_GetSmallPreviewImage_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_SetRotatingPreviewData, Temp_bool_Variable) == 0x0000D8, "Member 'BattlePassPreview_C_SetRotatingPreviewData::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_SetRotatingPreviewData, K2Node_Select_Default) == 0x0000E0, "Member 'BattlePassPreview_C_SetRotatingPreviewData::K2Node_Select_Default' has a wrong offset!");

// Function BattlePassPreview.BattlePassPreview_C.HandleUnhovered
// 0x0088 (0x0088 - 0x0000)
struct BattlePassPreview_C_HandleUnhovered final
{
public:
	class UBattlePassScreenPreviewRewardWidget*   Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBattlePassPreview_Widget_C*            K2Node_DynamicCast_AsBattle_Pass_Preview_Widget;   // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBattlePassPreview_Widget_C*            K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_1; // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBattlePassPreview_Widget_C*            K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_2; // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_2;    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBattlePassPreview_Widget_C*            K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_3; // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_3;    // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBattlePassPreview_Widget_C*            K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_4; // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_4;    // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBattlePassPreview_Widget_C*            K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_5; // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_5;    // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBattlePassPreview_Widget_C*            K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_6; // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_6;    // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_7;    // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_73[0x5];                                       // 0x0073(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBattlePassPreview_Widget_C*            K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_7; // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattlePassPreview_C_HandleUnhovered) == 0x000008, "Wrong alignment on BattlePassPreview_C_HandleUnhovered");
static_assert(sizeof(BattlePassPreview_C_HandleUnhovered) == 0x000088, "Wrong size on BattlePassPreview_C_HandleUnhovered");
static_assert(offsetof(BattlePassPreview_C_HandleUnhovered, Button) == 0x000000, "Member 'BattlePassPreview_C_HandleUnhovered::Button' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleUnhovered, K2Node_DynamicCast_AsBattle_Pass_Preview_Widget) == 0x000008, "Member 'BattlePassPreview_C_HandleUnhovered::K2Node_DynamicCast_AsBattle_Pass_Preview_Widget' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleUnhovered, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BattlePassPreview_C_HandleUnhovered::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleUnhovered, K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_1) == 0x000018, "Member 'BattlePassPreview_C_HandleUnhovered::K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_1' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleUnhovered, K2Node_DynamicCast_bSuccess_1) == 0x000020, "Member 'BattlePassPreview_C_HandleUnhovered::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleUnhovered, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000021, "Member 'BattlePassPreview_C_HandleUnhovered::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleUnhovered, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x000022, "Member 'BattlePassPreview_C_HandleUnhovered::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleUnhovered, K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_2) == 0x000028, "Member 'BattlePassPreview_C_HandleUnhovered::K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_2' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleUnhovered, K2Node_DynamicCast_bSuccess_2) == 0x000030, "Member 'BattlePassPreview_C_HandleUnhovered::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleUnhovered, CallFunc_EqualEqual_ObjectObject_ReturnValue_2) == 0x000031, "Member 'BattlePassPreview_C_HandleUnhovered::CallFunc_EqualEqual_ObjectObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleUnhovered, K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_3) == 0x000038, "Member 'BattlePassPreview_C_HandleUnhovered::K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_3' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleUnhovered, K2Node_DynamicCast_bSuccess_3) == 0x000040, "Member 'BattlePassPreview_C_HandleUnhovered::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleUnhovered, CallFunc_EqualEqual_ObjectObject_ReturnValue_3) == 0x000041, "Member 'BattlePassPreview_C_HandleUnhovered::CallFunc_EqualEqual_ObjectObject_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleUnhovered, K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_4) == 0x000048, "Member 'BattlePassPreview_C_HandleUnhovered::K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_4' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleUnhovered, K2Node_DynamicCast_bSuccess_4) == 0x000050, "Member 'BattlePassPreview_C_HandleUnhovered::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleUnhovered, CallFunc_EqualEqual_ObjectObject_ReturnValue_4) == 0x000051, "Member 'BattlePassPreview_C_HandleUnhovered::CallFunc_EqualEqual_ObjectObject_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleUnhovered, K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_5) == 0x000058, "Member 'BattlePassPreview_C_HandleUnhovered::K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_5' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleUnhovered, K2Node_DynamicCast_bSuccess_5) == 0x000060, "Member 'BattlePassPreview_C_HandleUnhovered::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleUnhovered, CallFunc_EqualEqual_ObjectObject_ReturnValue_5) == 0x000061, "Member 'BattlePassPreview_C_HandleUnhovered::CallFunc_EqualEqual_ObjectObject_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleUnhovered, K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_6) == 0x000068, "Member 'BattlePassPreview_C_HandleUnhovered::K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_6' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleUnhovered, K2Node_DynamicCast_bSuccess_6) == 0x000070, "Member 'BattlePassPreview_C_HandleUnhovered::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleUnhovered, CallFunc_EqualEqual_ObjectObject_ReturnValue_6) == 0x000071, "Member 'BattlePassPreview_C_HandleUnhovered::CallFunc_EqualEqual_ObjectObject_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleUnhovered, CallFunc_EqualEqual_ObjectObject_ReturnValue_7) == 0x000072, "Member 'BattlePassPreview_C_HandleUnhovered::CallFunc_EqualEqual_ObjectObject_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleUnhovered, K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_7) == 0x000078, "Member 'BattlePassPreview_C_HandleUnhovered::K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_7' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleUnhovered, K2Node_DynamicCast_bSuccess_7) == 0x000080, "Member 'BattlePassPreview_C_HandleUnhovered::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");

// Function BattlePassPreview.BattlePassPreview_C.SetOtherRewardsEarned
// 0x00C0 (0x00C0 - 0x0000)
struct BattlePassPreview_C_SetOtherRewardsEarned final
{
public:
	class UTextBlock*                             TextOtherRewards;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPreviewUnlockRewardData               UpsellUnlockRewardData;                            // 0x0008(0x0030)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0040(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0088(0x0010)(ZeroConstructor, ReferenceParm)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00A0(0x0018)()
	bool                                          Temp_bool_Variable;                                // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattlePassPreview_C_SetOtherRewardsEarned) == 0x000008, "Wrong alignment on BattlePassPreview_C_SetOtherRewardsEarned");
static_assert(sizeof(BattlePassPreview_C_SetOtherRewardsEarned) == 0x0000C0, "Wrong size on BattlePassPreview_C_SetOtherRewardsEarned");
static_assert(offsetof(BattlePassPreview_C_SetOtherRewardsEarned, TextOtherRewards) == 0x000000, "Member 'BattlePassPreview_C_SetOtherRewardsEarned::TextOtherRewards' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_SetOtherRewardsEarned, UpsellUnlockRewardData) == 0x000008, "Member 'BattlePassPreview_C_SetOtherRewardsEarned::UpsellUnlockRewardData' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_SetOtherRewardsEarned, Temp_byte_Variable) == 0x000038, "Member 'BattlePassPreview_C_SetOtherRewardsEarned::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_SetOtherRewardsEarned, K2Node_MakeStruct_FormatArgumentData) == 0x000040, "Member 'BattlePassPreview_C_SetOtherRewardsEarned::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_SetOtherRewardsEarned, CallFunc_Greater_IntInt_ReturnValue) == 0x000080, "Member 'BattlePassPreview_C_SetOtherRewardsEarned::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_SetOtherRewardsEarned, K2Node_MakeArray_Array) == 0x000088, "Member 'BattlePassPreview_C_SetOtherRewardsEarned::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_SetOtherRewardsEarned, Temp_byte_Variable_1) == 0x000098, "Member 'BattlePassPreview_C_SetOtherRewardsEarned::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_SetOtherRewardsEarned, CallFunc_Format_ReturnValue) == 0x0000A0, "Member 'BattlePassPreview_C_SetOtherRewardsEarned::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_SetOtherRewardsEarned, Temp_bool_Variable) == 0x0000B8, "Member 'BattlePassPreview_C_SetOtherRewardsEarned::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_SetOtherRewardsEarned, K2Node_Select_Default) == 0x0000B9, "Member 'BattlePassPreview_C_SetOtherRewardsEarned::K2Node_Select_Default' has a wrong offset!");

// Function BattlePassPreview.BattlePassPreview_C.SetVbucksEarned
// 0x00B8 (0x00B8 - 0x0000)
struct BattlePassPreview_C_SetVbucksEarned final
{
public:
	class UTextBlock*                             TextVbucks;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPreviewUnlockRewardData               UpsellUnlockRewardData;                            // 0x0008(0x0030)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Temp_bool_Variable;                                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0040(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0080(0x0010)(ZeroConstructor, ReferenceParm)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0098(0x0018)()
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattlePassPreview_C_SetVbucksEarned) == 0x000008, "Wrong alignment on BattlePassPreview_C_SetVbucksEarned");
static_assert(sizeof(BattlePassPreview_C_SetVbucksEarned) == 0x0000B8, "Wrong size on BattlePassPreview_C_SetVbucksEarned");
static_assert(offsetof(BattlePassPreview_C_SetVbucksEarned, TextVbucks) == 0x000000, "Member 'BattlePassPreview_C_SetVbucksEarned::TextVbucks' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_SetVbucksEarned, UpsellUnlockRewardData) == 0x000008, "Member 'BattlePassPreview_C_SetVbucksEarned::UpsellUnlockRewardData' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_SetVbucksEarned, Temp_bool_Variable) == 0x000038, "Member 'BattlePassPreview_C_SetVbucksEarned::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_SetVbucksEarned, Temp_byte_Variable) == 0x000039, "Member 'BattlePassPreview_C_SetVbucksEarned::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_SetVbucksEarned, K2Node_MakeStruct_FormatArgumentData) == 0x000040, "Member 'BattlePassPreview_C_SetVbucksEarned::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_SetVbucksEarned, K2Node_MakeArray_Array) == 0x000080, "Member 'BattlePassPreview_C_SetVbucksEarned::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_SetVbucksEarned, CallFunc_Greater_IntInt_ReturnValue) == 0x000090, "Member 'BattlePassPreview_C_SetVbucksEarned::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_SetVbucksEarned, CallFunc_Format_ReturnValue) == 0x000098, "Member 'BattlePassPreview_C_SetVbucksEarned::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_SetVbucksEarned, Temp_byte_Variable_1) == 0x0000B0, "Member 'BattlePassPreview_C_SetVbucksEarned::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_SetVbucksEarned, K2Node_Select_Default) == 0x0000B1, "Member 'BattlePassPreview_C_SetVbucksEarned::K2Node_Select_Default' has a wrong offset!");

// Function BattlePassPreview.BattlePassPreview_C.SetCharactersEarned
// 0x00C0 (0x00C0 - 0x0000)
struct BattlePassPreview_C_SetCharactersEarned final
{
public:
	class UTextBlock*                             TextCharacters;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPreviewUnlockRewardData               UpsellUnlockRewardData;                            // 0x0008(0x0030)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetRewardCharacterCount_CharacterCount;   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetRewardCharacterCount_HasCharacters;    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0048(0x0040)(HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0090(0x0010)(ZeroConstructor, ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00A0(0x0018)()
	bool                                          Temp_bool_Variable;                                // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattlePassPreview_C_SetCharactersEarned) == 0x000008, "Wrong alignment on BattlePassPreview_C_SetCharactersEarned");
static_assert(sizeof(BattlePassPreview_C_SetCharactersEarned) == 0x0000C0, "Wrong size on BattlePassPreview_C_SetCharactersEarned");
static_assert(offsetof(BattlePassPreview_C_SetCharactersEarned, TextCharacters) == 0x000000, "Member 'BattlePassPreview_C_SetCharactersEarned::TextCharacters' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_SetCharactersEarned, UpsellUnlockRewardData) == 0x000008, "Member 'BattlePassPreview_C_SetCharactersEarned::UpsellUnlockRewardData' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_SetCharactersEarned, Temp_byte_Variable) == 0x000038, "Member 'BattlePassPreview_C_SetCharactersEarned::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_SetCharactersEarned, CallFunc_GetRewardCharacterCount_CharacterCount) == 0x00003C, "Member 'BattlePassPreview_C_SetCharactersEarned::CallFunc_GetRewardCharacterCount_CharacterCount' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_SetCharactersEarned, CallFunc_GetRewardCharacterCount_HasCharacters) == 0x000040, "Member 'BattlePassPreview_C_SetCharactersEarned::CallFunc_GetRewardCharacterCount_HasCharacters' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_SetCharactersEarned, K2Node_MakeStruct_FormatArgumentData) == 0x000048, "Member 'BattlePassPreview_C_SetCharactersEarned::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_SetCharactersEarned, Temp_byte_Variable_1) == 0x000088, "Member 'BattlePassPreview_C_SetCharactersEarned::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_SetCharactersEarned, K2Node_MakeArray_Array) == 0x000090, "Member 'BattlePassPreview_C_SetCharactersEarned::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_SetCharactersEarned, CallFunc_Format_ReturnValue) == 0x0000A0, "Member 'BattlePassPreview_C_SetCharactersEarned::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_SetCharactersEarned, Temp_bool_Variable) == 0x0000B8, "Member 'BattlePassPreview_C_SetCharactersEarned::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_SetCharactersEarned, K2Node_Select_Default) == 0x0000B9, "Member 'BattlePassPreview_C_SetCharactersEarned::K2Node_Select_Default' has a wrong offset!");

// Function BattlePassPreview.BattlePassPreview_C.GetAdditionalRewardsVisibility
// 0x0040 (0x0040 - 0x0000)
struct BattlePassPreview_C_GetAdditionalRewardsVisibility final
{
public:
	struct FPreviewUnlockRewardData               UpsellUnlockRewardData;                            // 0x0000(0x0030)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	ESlateVisibility                              ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_2;             // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattlePassPreview_C_GetAdditionalRewardsVisibility) == 0x000008, "Wrong alignment on BattlePassPreview_C_GetAdditionalRewardsVisibility");
static_assert(sizeof(BattlePassPreview_C_GetAdditionalRewardsVisibility) == 0x000040, "Wrong size on BattlePassPreview_C_GetAdditionalRewardsVisibility");
static_assert(offsetof(BattlePassPreview_C_GetAdditionalRewardsVisibility, UpsellUnlockRewardData) == 0x000000, "Member 'BattlePassPreview_C_GetAdditionalRewardsVisibility::UpsellUnlockRewardData' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_GetAdditionalRewardsVisibility, ReturnValue) == 0x000030, "Member 'BattlePassPreview_C_GetAdditionalRewardsVisibility::ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_GetAdditionalRewardsVisibility, Temp_bool_Variable) == 0x000031, "Member 'BattlePassPreview_C_GetAdditionalRewardsVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_GetAdditionalRewardsVisibility, Temp_byte_Variable) == 0x000032, "Member 'BattlePassPreview_C_GetAdditionalRewardsVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_GetAdditionalRewardsVisibility, CallFunc_Greater_IntInt_ReturnValue) == 0x000033, "Member 'BattlePassPreview_C_GetAdditionalRewardsVisibility::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_GetAdditionalRewardsVisibility, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000034, "Member 'BattlePassPreview_C_GetAdditionalRewardsVisibility::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_GetAdditionalRewardsVisibility, CallFunc_Greater_IntInt_ReturnValue_2) == 0x000035, "Member 'BattlePassPreview_C_GetAdditionalRewardsVisibility::CallFunc_Greater_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_GetAdditionalRewardsVisibility, Temp_byte_Variable_1) == 0x000036, "Member 'BattlePassPreview_C_GetAdditionalRewardsVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_GetAdditionalRewardsVisibility, CallFunc_BooleanOR_ReturnValue) == 0x000037, "Member 'BattlePassPreview_C_GetAdditionalRewardsVisibility::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_GetAdditionalRewardsVisibility, CallFunc_BooleanOR_ReturnValue_1) == 0x000038, "Member 'BattlePassPreview_C_GetAdditionalRewardsVisibility::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_GetAdditionalRewardsVisibility, K2Node_Select_Default) == 0x000039, "Member 'BattlePassPreview_C_GetAdditionalRewardsVisibility::K2Node_Select_Default' has a wrong offset!");

// Function BattlePassPreview.BattlePassPreview_C.GetRewardCharacterCount
// 0x0038 (0x0038 - 0x0000)
struct BattlePassPreview_C_GetRewardCharacterCount final
{
public:
	struct FPreviewUnlockRewardData               UpsellUnlockRewardData;                            // 0x0000(0x0030)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         CharacterCount;                                    // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasCharacters;                                     // 0x0034(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattlePassPreview_C_GetRewardCharacterCount) == 0x000008, "Wrong alignment on BattlePassPreview_C_GetRewardCharacterCount");
static_assert(sizeof(BattlePassPreview_C_GetRewardCharacterCount) == 0x000038, "Wrong size on BattlePassPreview_C_GetRewardCharacterCount");
static_assert(offsetof(BattlePassPreview_C_GetRewardCharacterCount, UpsellUnlockRewardData) == 0x000000, "Member 'BattlePassPreview_C_GetRewardCharacterCount::UpsellUnlockRewardData' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_GetRewardCharacterCount, CharacterCount) == 0x000030, "Member 'BattlePassPreview_C_GetRewardCharacterCount::CharacterCount' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_GetRewardCharacterCount, HasCharacters) == 0x000034, "Member 'BattlePassPreview_C_GetRewardCharacterCount::HasCharacters' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_GetRewardCharacterCount, CallFunc_Greater_IntInt_ReturnValue) == 0x000035, "Member 'BattlePassPreview_C_GetRewardCharacterCount::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BattlePassPreview.BattlePassPreview_C.HandleInitData
// 0x0150 (0x0150 - 0x0000)
struct BattlePassPreview_C_HandleInitData final
{
public:
	struct FPreviewUnlockData                     UpsellUnlockData;                                  // 0x0000(0x00B0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UFortItem*                              SinglePreviewReward;                               // 0x00B0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SingleRewardReadyToUnlock;                         // 0x00B8(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SingleRewardUnlockLevel;                           // 0x00BC(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RewardUnlockLevel;                                 // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRewardReadyToUnlock;                              // 0x00C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItem*                              SinglePreviewRewardData;                           // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEarnedRewardsHasCharacters;                       // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPreviewUnlockRewardData               EarnedRewards;                                     // 0x00D8(0x0030)(Edit, BlueprintVisible)
	struct FPreviewUnlockRewardData               InstantRewards;                                    // 0x0108(0x0030)(Edit, BlueprintVisible)
	bool                                          Temp_bool_Variable;                                // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x013A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x013B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x013C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x013D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13E[0x2];                                      // 0x013E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0144(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0145(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              CallFunc_GetAdditionalRewardsVisibility_ReturnValue; // 0x0146(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0147(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x014A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattlePassPreview_C_HandleInitData) == 0x000008, "Wrong alignment on BattlePassPreview_C_HandleInitData");
static_assert(sizeof(BattlePassPreview_C_HandleInitData) == 0x000150, "Wrong size on BattlePassPreview_C_HandleInitData");
static_assert(offsetof(BattlePassPreview_C_HandleInitData, UpsellUnlockData) == 0x000000, "Member 'BattlePassPreview_C_HandleInitData::UpsellUnlockData' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleInitData, SinglePreviewReward) == 0x0000B0, "Member 'BattlePassPreview_C_HandleInitData::SinglePreviewReward' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleInitData, SingleRewardReadyToUnlock) == 0x0000B8, "Member 'BattlePassPreview_C_HandleInitData::SingleRewardReadyToUnlock' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleInitData, SingleRewardUnlockLevel) == 0x0000BC, "Member 'BattlePassPreview_C_HandleInitData::SingleRewardUnlockLevel' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleInitData, RewardUnlockLevel) == 0x0000C0, "Member 'BattlePassPreview_C_HandleInitData::RewardUnlockLevel' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleInitData, bRewardReadyToUnlock) == 0x0000C4, "Member 'BattlePassPreview_C_HandleInitData::bRewardReadyToUnlock' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleInitData, SinglePreviewRewardData) == 0x0000C8, "Member 'BattlePassPreview_C_HandleInitData::SinglePreviewRewardData' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleInitData, bEarnedRewardsHasCharacters) == 0x0000D0, "Member 'BattlePassPreview_C_HandleInitData::bEarnedRewardsHasCharacters' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleInitData, EarnedRewards) == 0x0000D8, "Member 'BattlePassPreview_C_HandleInitData::EarnedRewards' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleInitData, InstantRewards) == 0x000108, "Member 'BattlePassPreview_C_HandleInitData::InstantRewards' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleInitData, Temp_bool_Variable) == 0x000138, "Member 'BattlePassPreview_C_HandleInitData::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleInitData, Temp_byte_Variable) == 0x000139, "Member 'BattlePassPreview_C_HandleInitData::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleInitData, Temp_byte_Variable_1) == 0x00013A, "Member 'BattlePassPreview_C_HandleInitData::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleInitData, Temp_bool_Variable_1) == 0x00013B, "Member 'BattlePassPreview_C_HandleInitData::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleInitData, Temp_byte_Variable_2) == 0x00013C, "Member 'BattlePassPreview_C_HandleInitData::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleInitData, Temp_byte_Variable_3) == 0x00013D, "Member 'BattlePassPreview_C_HandleInitData::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleInitData, CallFunc_Add_IntInt_ReturnValue) == 0x000140, "Member 'BattlePassPreview_C_HandleInitData::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleInitData, CallFunc_Greater_IntInt_ReturnValue) == 0x000144, "Member 'BattlePassPreview_C_HandleInitData::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleInitData, K2Node_Select_Default) == 0x000145, "Member 'BattlePassPreview_C_HandleInitData::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleInitData, CallFunc_GetAdditionalRewardsVisibility_ReturnValue) == 0x000146, "Member 'BattlePassPreview_C_HandleInitData::CallFunc_GetAdditionalRewardsVisibility_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleInitData, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000147, "Member 'BattlePassPreview_C_HandleInitData::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleInitData, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000148, "Member 'BattlePassPreview_C_HandleInitData::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleInitData, CallFunc_BooleanOR_ReturnValue) == 0x000149, "Member 'BattlePassPreview_C_HandleInitData::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_HandleInitData, K2Node_Select_Default_1) == 0x00014A, "Member 'BattlePassPreview_C_HandleInitData::K2Node_Select_Default_1' has a wrong offset!");

// Function BattlePassPreview.BattlePassPreview_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BattlePassPreview_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattlePassPreview_C_PreConstruct) == 0x000001, "Wrong alignment on BattlePassPreview_C_PreConstruct");
static_assert(sizeof(BattlePassPreview_C_PreConstruct) == 0x000001, "Wrong size on BattlePassPreview_C_PreConstruct");
static_assert(offsetof(BattlePassPreview_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BattlePassPreview_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BattlePassPreview.BattlePassPreview_C.Tick
// 0x003C (0x003C - 0x0000)
struct BattlePassPreview_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattlePassPreview_C_Tick) == 0x000004, "Wrong alignment on BattlePassPreview_C_Tick");
static_assert(sizeof(BattlePassPreview_C_Tick) == 0x00003C, "Wrong size on BattlePassPreview_C_Tick");
static_assert(offsetof(BattlePassPreview_C_Tick, MyGeometry) == 0x000000, "Member 'BattlePassPreview_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_Tick, InDeltaTime) == 0x000038, "Member 'BattlePassPreview_C_Tick::InDeltaTime' has a wrong offset!");

// Function BattlePassPreview.BattlePassPreview_C.OnInitData
// 0x00C8 (0x00C8 - 0x0000)
struct BattlePassPreview_C_OnInitData final
{
public:
	struct FPreviewUnlockData                     Data;                                              // 0x0000(0x00B0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	const class UFortItem*                        SinglePreviewCycleReward;                          // 0x00B0(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bReadyToUnlock;                                    // 0x00B8(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LevelUnlocked;                                     // 0x00BC(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPurchasedAnnualPass;                              // 0x00C0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattlePassPreview_C_OnInitData) == 0x000008, "Wrong alignment on BattlePassPreview_C_OnInitData");
static_assert(sizeof(BattlePassPreview_C_OnInitData) == 0x0000C8, "Wrong size on BattlePassPreview_C_OnInitData");
static_assert(offsetof(BattlePassPreview_C_OnInitData, Data) == 0x000000, "Member 'BattlePassPreview_C_OnInitData::Data' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_OnInitData, SinglePreviewCycleReward) == 0x0000B0, "Member 'BattlePassPreview_C_OnInitData::SinglePreviewCycleReward' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_OnInitData, bReadyToUnlock) == 0x0000B8, "Member 'BattlePassPreview_C_OnInitData::bReadyToUnlock' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_OnInitData, LevelUnlocked) == 0x0000BC, "Member 'BattlePassPreview_C_OnInitData::LevelUnlocked' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_OnInitData, bPurchasedAnnualPass) == 0x0000C0, "Member 'BattlePassPreview_C_OnInitData::bPurchasedAnnualPass' has a wrong offset!");

// Function BattlePassPreview.BattlePassPreview_C.BndEvt__Button_ViewAllRewards_K2Node_ComponentBoundEvent_0_CommonButtonClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BattlePassPreview_C_BndEvt__Button_ViewAllRewards_K2Node_ComponentBoundEvent_0_CommonButtonClicked__DelegateSignature final
{
public:
	class UCommonButton*                          Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattlePassPreview_C_BndEvt__Button_ViewAllRewards_K2Node_ComponentBoundEvent_0_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong alignment on BattlePassPreview_C_BndEvt__Button_ViewAllRewards_K2Node_ComponentBoundEvent_0_CommonButtonClicked__DelegateSignature");
static_assert(sizeof(BattlePassPreview_C_BndEvt__Button_ViewAllRewards_K2Node_ComponentBoundEvent_0_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong size on BattlePassPreview_C_BndEvt__Button_ViewAllRewards_K2Node_ComponentBoundEvent_0_CommonButtonClicked__DelegateSignature");
static_assert(offsetof(BattlePassPreview_C_BndEvt__Button_ViewAllRewards_K2Node_ComponentBoundEvent_0_CommonButtonClicked__DelegateSignature, Button) == 0x000000, "Member 'BattlePassPreview_C_BndEvt__Button_ViewAllRewards_K2Node_ComponentBoundEvent_0_CommonButtonClicked__DelegateSignature::Button' has a wrong offset!");

// Function BattlePassPreview.BattlePassPreview_C.OnCyclePreviewReward
// 0x0010 (0x0010 - 0x0000)
struct BattlePassPreview_C_OnCyclePreviewReward final
{
public:
	const class UFortItem*                        NextReward;                                        // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bReadyToUnlock;                                    // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LevelUnlocked;                                     // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattlePassPreview_C_OnCyclePreviewReward) == 0x000008, "Wrong alignment on BattlePassPreview_C_OnCyclePreviewReward");
static_assert(sizeof(BattlePassPreview_C_OnCyclePreviewReward) == 0x000010, "Wrong size on BattlePassPreview_C_OnCyclePreviewReward");
static_assert(offsetof(BattlePassPreview_C_OnCyclePreviewReward, NextReward) == 0x000000, "Member 'BattlePassPreview_C_OnCyclePreviewReward::NextReward' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_OnCyclePreviewReward, bReadyToUnlock) == 0x000008, "Member 'BattlePassPreview_C_OnCyclePreviewReward::bReadyToUnlock' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_OnCyclePreviewReward, LevelUnlocked) == 0x00000C, "Member 'BattlePassPreview_C_OnCyclePreviewReward::LevelUnlocked' has a wrong offset!");

// Function BattlePassPreview.BattlePassPreview_C.BndEvt__Currency_Widget_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BattlePassPreview_C_BndEvt__Currency_Widget_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature final
{
public:
	class UCommonButton*                          Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattlePassPreview_C_BndEvt__Currency_Widget_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong alignment on BattlePassPreview_C_BndEvt__Currency_Widget_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature");
static_assert(sizeof(BattlePassPreview_C_BndEvt__Currency_Widget_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong size on BattlePassPreview_C_BndEvt__Currency_Widget_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature");
static_assert(offsetof(BattlePassPreview_C_BndEvt__Currency_Widget_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature, Button) == 0x000000, "Member 'BattlePassPreview_C_BndEvt__Currency_Widget_K2Node_ComponentBoundEvent_1_CommonButtonClicked__DelegateSignature::Button' has a wrong offset!");

// Function BattlePassPreview.BattlePassPreview_C.BndEvt__Character_Widget2_K2Node_ComponentBoundEvent_2_CommonButtonClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BattlePassPreview_C_BndEvt__Character_Widget2_K2Node_ComponentBoundEvent_2_CommonButtonClicked__DelegateSignature final
{
public:
	class UCommonButton*                          Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattlePassPreview_C_BndEvt__Character_Widget2_K2Node_ComponentBoundEvent_2_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong alignment on BattlePassPreview_C_BndEvt__Character_Widget2_K2Node_ComponentBoundEvent_2_CommonButtonClicked__DelegateSignature");
static_assert(sizeof(BattlePassPreview_C_BndEvt__Character_Widget2_K2Node_ComponentBoundEvent_2_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong size on BattlePassPreview_C_BndEvt__Character_Widget2_K2Node_ComponentBoundEvent_2_CommonButtonClicked__DelegateSignature");
static_assert(offsetof(BattlePassPreview_C_BndEvt__Character_Widget2_K2Node_ComponentBoundEvent_2_CommonButtonClicked__DelegateSignature, Button) == 0x000000, "Member 'BattlePassPreview_C_BndEvt__Character_Widget2_K2Node_ComponentBoundEvent_2_CommonButtonClicked__DelegateSignature::Button' has a wrong offset!");

// Function BattlePassPreview.BattlePassPreview_C.BndEvt__Character_Widget3_K2Node_ComponentBoundEvent_3_CommonButtonClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BattlePassPreview_C_BndEvt__Character_Widget3_K2Node_ComponentBoundEvent_3_CommonButtonClicked__DelegateSignature final
{
public:
	class UCommonButton*                          Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattlePassPreview_C_BndEvt__Character_Widget3_K2Node_ComponentBoundEvent_3_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong alignment on BattlePassPreview_C_BndEvt__Character_Widget3_K2Node_ComponentBoundEvent_3_CommonButtonClicked__DelegateSignature");
static_assert(sizeof(BattlePassPreview_C_BndEvt__Character_Widget3_K2Node_ComponentBoundEvent_3_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong size on BattlePassPreview_C_BndEvt__Character_Widget3_K2Node_ComponentBoundEvent_3_CommonButtonClicked__DelegateSignature");
static_assert(offsetof(BattlePassPreview_C_BndEvt__Character_Widget3_K2Node_ComponentBoundEvent_3_CommonButtonClicked__DelegateSignature, Button) == 0x000000, "Member 'BattlePassPreview_C_BndEvt__Character_Widget3_K2Node_ComponentBoundEvent_3_CommonButtonClicked__DelegateSignature::Button' has a wrong offset!");

// Function BattlePassPreview.BattlePassPreview_C.BndEvt__Character_Widget4_K2Node_ComponentBoundEvent_4_CommonButtonClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BattlePassPreview_C_BndEvt__Character_Widget4_K2Node_ComponentBoundEvent_4_CommonButtonClicked__DelegateSignature final
{
public:
	class UCommonButton*                          Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattlePassPreview_C_BndEvt__Character_Widget4_K2Node_ComponentBoundEvent_4_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong alignment on BattlePassPreview_C_BndEvt__Character_Widget4_K2Node_ComponentBoundEvent_4_CommonButtonClicked__DelegateSignature");
static_assert(sizeof(BattlePassPreview_C_BndEvt__Character_Widget4_K2Node_ComponentBoundEvent_4_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong size on BattlePassPreview_C_BndEvt__Character_Widget4_K2Node_ComponentBoundEvent_4_CommonButtonClicked__DelegateSignature");
static_assert(offsetof(BattlePassPreview_C_BndEvt__Character_Widget4_K2Node_ComponentBoundEvent_4_CommonButtonClicked__DelegateSignature, Button) == 0x000000, "Member 'BattlePassPreview_C_BndEvt__Character_Widget4_K2Node_ComponentBoundEvent_4_CommonButtonClicked__DelegateSignature::Button' has a wrong offset!");

// Function BattlePassPreview.BattlePassPreview_C.BndEvt__Character_Widget5_K2Node_ComponentBoundEvent_5_CommonButtonClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BattlePassPreview_C_BndEvt__Character_Widget5_K2Node_ComponentBoundEvent_5_CommonButtonClicked__DelegateSignature final
{
public:
	class UCommonButton*                          Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattlePassPreview_C_BndEvt__Character_Widget5_K2Node_ComponentBoundEvent_5_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong alignment on BattlePassPreview_C_BndEvt__Character_Widget5_K2Node_ComponentBoundEvent_5_CommonButtonClicked__DelegateSignature");
static_assert(sizeof(BattlePassPreview_C_BndEvt__Character_Widget5_K2Node_ComponentBoundEvent_5_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong size on BattlePassPreview_C_BndEvt__Character_Widget5_K2Node_ComponentBoundEvent_5_CommonButtonClicked__DelegateSignature");
static_assert(offsetof(BattlePassPreview_C_BndEvt__Character_Widget5_K2Node_ComponentBoundEvent_5_CommonButtonClicked__DelegateSignature, Button) == 0x000000, "Member 'BattlePassPreview_C_BndEvt__Character_Widget5_K2Node_ComponentBoundEvent_5_CommonButtonClicked__DelegateSignature::Button' has a wrong offset!");

// Function BattlePassPreview.BattlePassPreview_C.BndEvt__Character_Widget6_K2Node_ComponentBoundEvent_6_CommonButtonClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BattlePassPreview_C_BndEvt__Character_Widget6_K2Node_ComponentBoundEvent_6_CommonButtonClicked__DelegateSignature final
{
public:
	class UCommonButton*                          Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattlePassPreview_C_BndEvt__Character_Widget6_K2Node_ComponentBoundEvent_6_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong alignment on BattlePassPreview_C_BndEvt__Character_Widget6_K2Node_ComponentBoundEvent_6_CommonButtonClicked__DelegateSignature");
static_assert(sizeof(BattlePassPreview_C_BndEvt__Character_Widget6_K2Node_ComponentBoundEvent_6_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong size on BattlePassPreview_C_BndEvt__Character_Widget6_K2Node_ComponentBoundEvent_6_CommonButtonClicked__DelegateSignature");
static_assert(offsetof(BattlePassPreview_C_BndEvt__Character_Widget6_K2Node_ComponentBoundEvent_6_CommonButtonClicked__DelegateSignature, Button) == 0x000000, "Member 'BattlePassPreview_C_BndEvt__Character_Widget6_K2Node_ComponentBoundEvent_6_CommonButtonClicked__DelegateSignature::Button' has a wrong offset!");

// Function BattlePassPreview.BattlePassPreview_C.BndEvt__Character_Widget7_K2Node_ComponentBoundEvent_7_CommonButtonClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BattlePassPreview_C_BndEvt__Character_Widget7_K2Node_ComponentBoundEvent_7_CommonButtonClicked__DelegateSignature final
{
public:
	class UCommonButton*                          Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattlePassPreview_C_BndEvt__Character_Widget7_K2Node_ComponentBoundEvent_7_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong alignment on BattlePassPreview_C_BndEvt__Character_Widget7_K2Node_ComponentBoundEvent_7_CommonButtonClicked__DelegateSignature");
static_assert(sizeof(BattlePassPreview_C_BndEvt__Character_Widget7_K2Node_ComponentBoundEvent_7_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong size on BattlePassPreview_C_BndEvt__Character_Widget7_K2Node_ComponentBoundEvent_7_CommonButtonClicked__DelegateSignature");
static_assert(offsetof(BattlePassPreview_C_BndEvt__Character_Widget7_K2Node_ComponentBoundEvent_7_CommonButtonClicked__DelegateSignature, Button) == 0x000000, "Member 'BattlePassPreview_C_BndEvt__Character_Widget7_K2Node_ComponentBoundEvent_7_CommonButtonClicked__DelegateSignature::Button' has a wrong offset!");

// Function BattlePassPreview.BattlePassPreview_C.BndEvt__Character_Widget1_K2Node_ComponentBoundEvent_8_CommonButtonClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BattlePassPreview_C_BndEvt__Character_Widget1_K2Node_ComponentBoundEvent_8_CommonButtonClicked__DelegateSignature final
{
public:
	class UCommonButton*                          Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattlePassPreview_C_BndEvt__Character_Widget1_K2Node_ComponentBoundEvent_8_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong alignment on BattlePassPreview_C_BndEvt__Character_Widget1_K2Node_ComponentBoundEvent_8_CommonButtonClicked__DelegateSignature");
static_assert(sizeof(BattlePassPreview_C_BndEvt__Character_Widget1_K2Node_ComponentBoundEvent_8_CommonButtonClicked__DelegateSignature) == 0x000008, "Wrong size on BattlePassPreview_C_BndEvt__Character_Widget1_K2Node_ComponentBoundEvent_8_CommonButtonClicked__DelegateSignature");
static_assert(offsetof(BattlePassPreview_C_BndEvt__Character_Widget1_K2Node_ComponentBoundEvent_8_CommonButtonClicked__DelegateSignature, Button) == 0x000000, "Member 'BattlePassPreview_C_BndEvt__Character_Widget1_K2Node_ComponentBoundEvent_8_CommonButtonClicked__DelegateSignature::Button' has a wrong offset!");

// Function BattlePassPreview.BattlePassPreview_C.ExecuteUbergraph_BattlePassPreview
// 0x0340 (0x0340 - 0x0000)
struct BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBattlePassPreview_Widget_C*            K2Node_DynamicCast_AsBattle_Pass_Preview_Widget;   // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateChildSize                        K2Node_MakeStruct_SlateChildSize;                  // 0x0014(0x0008)(NoDestructor)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBattlePassPreview_Widget_C*            K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_1; // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHorizontalBoxSlot*                     CallFunc_SlotAsHorizontalBoxSlot_ReturnValue;      // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateChildSize                        K2Node_MakeStruct_SlateChildSize_1;                // 0x0038(0x0008)(NoDestructor)
	class UHorizontalBoxSlot*                     CallFunc_SlotAsHorizontalBoxSlot_ReturnValue_1;    // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHorizontalBoxSlot*                     CallFunc_SlotAsHorizontalBoxSlot_ReturnValue_2;    // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBattlePassPreview_Widget_C*            K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_2; // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateChildSize                        K2Node_MakeStruct_SlateChildSize_2;                // 0x005C(0x0008)(NoDestructor)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBattlePassPreview_Widget_C*            K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_3; // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateChildSize                        K2Node_MakeStruct_SlateChildSize_3;                // 0x0074(0x0008)(NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7E[0x2];                                       // 0x007E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UBattlePassPreview_Widget_C*            K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_4; // 0x0080(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPreviewUnlockData                     K2Node_Event_Data;                                 // 0x0090(0x00B0)(ConstParm)
	const class UFortItem*                        K2Node_Event_SinglePreviewCycleReward;             // 0x0140(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bReadyToUnlock_1;                     // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_149[0x3];                                      // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_LevelUnlocked_1;                      // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bPurchasedAnnualPass;                 // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_151[0x3];                                      // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateChildSize                        K2Node_MakeStruct_SlateChildSize_4;                // 0x0154(0x0008)(NoDestructor)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCommonButton*                          K2Node_ComponentBoundEvent_Button_8;               // 0x0168(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBattlePassViewRewardsScreen_C*         CallFunc_Create_ReturnValue;                       // 0x0170(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHorizontalBoxSlot*                     CallFunc_SlotAsHorizontalBoxSlot_ReturnValue_3;    // 0x0178(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHorizontalBoxSlot*                     CallFunc_SlotAsHorizontalBoxSlot_ReturnValue_4;    // 0x0180(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBattlePassPreview_Widget_C*            K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_5; // 0x0190(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_199[0x7];                                      // 0x0199(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBattlePassPreview_Widget_C*            K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_6; // 0x01A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A9[0x3];                                      // 0x01A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateChildSize                        K2Node_MakeStruct_SlateChildSize_5;                // 0x01AC(0x0008)(NoDestructor)
	struct FSlateChildSize                        K2Node_MakeStruct_SlateChildSize_6;                // 0x01B4(0x0008)(NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x01BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1BD[0x3];                                      // 0x01BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C9[0x7];                                      // 0x01C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue_1;       // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue_2;       // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UFortItem*                        K2Node_Event_NextReward;                           // 0x01E0(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bReadyToUnlock;                       // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E9[0x3];                                      // 0x01E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_LevelUnlocked;                        // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCommonButton*                          K2Node_ComponentBoundEvent_Button_7;               // 0x01F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F9[0x7];                                      // 0x01F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBattlePassPreview_Widget_C*            K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_7; // 0x0200(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_209[0x7];                                      // 0x0209(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButton*                          K2Node_ComponentBoundEvent_Button_6;               // 0x0210(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCommonButton*                          K2Node_ComponentBoundEvent_Button_5;               // 0x0218(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCommonButton*                          K2Node_ComponentBoundEvent_Button_4;               // 0x0220(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCommonButton*                          K2Node_ComponentBoundEvent_Button_3;               // 0x0228(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCommonButton*                          K2Node_ComponentBoundEvent_Button_2;               // 0x0230(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCommonButton*                          K2Node_ComponentBoundEvent_Button_1;               // 0x0238(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBattlePassPreview_Widget_C*            K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_8; // 0x0240(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_8;                     // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_249[0x7];                                      // 0x0249(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBattlePassPreview_Widget_C*            K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_9; // 0x0250(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_9;                     // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_259[0x3];                                      // 0x0259(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateChildSize                        K2Node_MakeStruct_SlateChildSize_7;                // 0x025C(0x0008)(NoDestructor)
	uint8                                         Pad_264[0x4];                                      // 0x0264(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButton*                          K2Node_ComponentBoundEvent_Button;                 // 0x0268(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_271[0x7];                                      // 0x0271(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBattlePassPreview_Widget_C*            K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_10; // 0x0278(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_10;                    // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_281[0x7];                                      // 0x0281(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHorizontalBoxSlot*                     CallFunc_SlotAsHorizontalBoxSlot_ReturnValue_5;    // 0x0288(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBattlePassPreview_Widget_C*            K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_11; // 0x0290(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_11;                    // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_299[0x7];                                      // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHorizontalBoxSlot*                     CallFunc_SlotAsHorizontalBoxSlot_ReturnValue_6;    // 0x02A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBattlePassPreview_Widget_C*            K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_12; // 0x02A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_12;                    // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B1[0x7];                                      // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHorizontalBoxSlot*                     CallFunc_SlotAsHorizontalBoxSlot_ReturnValue_7;    // 0x02B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x02C0(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x02F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FC[0x4];                                      // 0x02FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBattlePassPreview_Widget_C*            K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_13; // 0x0300(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_13;                    // 0x0308(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0309(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_30A[0x6];                                      // 0x030A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBattlePassPreview_Widget_C*            K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_14; // 0x0310(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_14;                    // 0x0318(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_319[0x7];                                      // 0x0319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBattlePassPreview_Widget_C*            K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_15; // 0x0320(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_15;                    // 0x0328(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_329[0x7];                                      // 0x0329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0330(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0338(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x0339(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x033A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview) == 0x000008, "Wrong alignment on BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview");
static_assert(sizeof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview) == 0x000340, "Wrong size on BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, EntryPoint) == 0x000000, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::EntryPoint' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_DynamicCast_AsBattle_Pass_Preview_Widget) == 0x000008, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_DynamicCast_AsBattle_Pass_Preview_Widget' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_MakeStruct_SlateChildSize) == 0x000014, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_MakeStruct_SlateChildSize' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_1) == 0x000020, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_1' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_DynamicCast_bSuccess_1) == 0x000028, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, CallFunc_SlotAsHorizontalBoxSlot_ReturnValue) == 0x000030, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::CallFunc_SlotAsHorizontalBoxSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_MakeStruct_SlateChildSize_1) == 0x000038, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_MakeStruct_SlateChildSize_1' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, CallFunc_SlotAsHorizontalBoxSlot_ReturnValue_1) == 0x000040, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::CallFunc_SlotAsHorizontalBoxSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, CallFunc_SlotAsHorizontalBoxSlot_ReturnValue_2) == 0x000048, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::CallFunc_SlotAsHorizontalBoxSlot_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_2) == 0x000050, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_2' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_DynamicCast_bSuccess_2) == 0x000058, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, CallFunc_IsValid_ReturnValue_1) == 0x000059, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_MakeStruct_SlateChildSize_2) == 0x00005C, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_MakeStruct_SlateChildSize_2' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_3) == 0x000068, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_3' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_DynamicCast_bSuccess_3) == 0x000070, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, CallFunc_IsValid_ReturnValue_2) == 0x000071, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_MakeStruct_SlateChildSize_3) == 0x000074, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_MakeStruct_SlateChildSize_3' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, Temp_byte_Variable) == 0x00007C, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, CallFunc_IsValid_ReturnValue_3) == 0x00007D, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_4) == 0x000080, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_4' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_DynamicCast_bSuccess_4) == 0x000088, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_Event_Data) == 0x000090, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_Event_Data' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_Event_SinglePreviewCycleReward) == 0x000140, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_Event_SinglePreviewCycleReward' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_Event_bReadyToUnlock_1) == 0x000148, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_Event_bReadyToUnlock_1' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_Event_LevelUnlocked_1) == 0x00014C, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_Event_LevelUnlocked_1' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_Event_bPurchasedAnnualPass) == 0x000150, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_Event_bPurchasedAnnualPass' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_MakeStruct_SlateChildSize_4) == 0x000154, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_MakeStruct_SlateChildSize_4' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, CallFunc_GetOwningPlayer_ReturnValue) == 0x000160, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_ComponentBoundEvent_Button_8) == 0x000168, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_ComponentBoundEvent_Button_8' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, CallFunc_Create_ReturnValue) == 0x000170, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, CallFunc_SlotAsHorizontalBoxSlot_ReturnValue_3) == 0x000178, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::CallFunc_SlotAsHorizontalBoxSlot_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, CallFunc_SlotAsHorizontalBoxSlot_ReturnValue_4) == 0x000180, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::CallFunc_SlotAsHorizontalBoxSlot_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, CallFunc_IsValid_ReturnValue_4) == 0x000188, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_5) == 0x000190, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_5' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_DynamicCast_bSuccess_5) == 0x000198, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_6) == 0x0001A0, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_6' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_DynamicCast_bSuccess_6) == 0x0001A8, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_MakeStruct_SlateChildSize_5) == 0x0001AC, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_MakeStruct_SlateChildSize_5' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_MakeStruct_SlateChildSize_6) == 0x0001B4, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_MakeStruct_SlateChildSize_6' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, CallFunc_IsValid_ReturnValue_5) == 0x0001BC, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, CallFunc_PlayAnimationForward_ReturnValue) == 0x0001C0, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, Temp_byte_Variable_1) == 0x0001C8, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, CallFunc_PlayAnimationForward_ReturnValue_1) == 0x0001D0, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::CallFunc_PlayAnimationForward_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, CallFunc_PlayAnimationForward_ReturnValue_2) == 0x0001D8, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::CallFunc_PlayAnimationForward_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_Event_NextReward) == 0x0001E0, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_Event_NextReward' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_Event_bReadyToUnlock) == 0x0001E8, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_Event_bReadyToUnlock' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_Event_LevelUnlocked) == 0x0001EC, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_Event_LevelUnlocked' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_ComponentBoundEvent_Button_7) == 0x0001F0, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_ComponentBoundEvent_Button_7' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, CallFunc_IsValid_ReturnValue_6) == 0x0001F8, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_7) == 0x000200, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_7' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_DynamicCast_bSuccess_7) == 0x000208, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_ComponentBoundEvent_Button_6) == 0x000210, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_ComponentBoundEvent_Button_6' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_ComponentBoundEvent_Button_5) == 0x000218, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_ComponentBoundEvent_Button_5' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_ComponentBoundEvent_Button_4) == 0x000220, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_ComponentBoundEvent_Button_4' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_ComponentBoundEvent_Button_3) == 0x000228, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_ComponentBoundEvent_Button_3' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_ComponentBoundEvent_Button_2) == 0x000230, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_ComponentBoundEvent_Button_2' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_ComponentBoundEvent_Button_1) == 0x000238, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_ComponentBoundEvent_Button_1' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_8) == 0x000240, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_8' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_DynamicCast_bSuccess_8) == 0x000248, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_DynamicCast_bSuccess_8' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_9) == 0x000250, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_9' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_DynamicCast_bSuccess_9) == 0x000258, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_DynamicCast_bSuccess_9' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_MakeStruct_SlateChildSize_7) == 0x00025C, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_MakeStruct_SlateChildSize_7' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_ComponentBoundEvent_Button) == 0x000268, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_ComponentBoundEvent_Button' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, CallFunc_IsValid_ReturnValue_7) == 0x000270, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_10) == 0x000278, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_10' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_DynamicCast_bSuccess_10) == 0x000280, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_DynamicCast_bSuccess_10' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, CallFunc_SlotAsHorizontalBoxSlot_ReturnValue_5) == 0x000288, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::CallFunc_SlotAsHorizontalBoxSlot_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_11) == 0x000290, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_11' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_DynamicCast_bSuccess_11) == 0x000298, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_DynamicCast_bSuccess_11' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, CallFunc_SlotAsHorizontalBoxSlot_ReturnValue_6) == 0x0002A0, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::CallFunc_SlotAsHorizontalBoxSlot_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_12) == 0x0002A8, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_12' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_DynamicCast_bSuccess_12) == 0x0002B0, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_DynamicCast_bSuccess_12' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, CallFunc_SlotAsHorizontalBoxSlot_ReturnValue_7) == 0x0002B8, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::CallFunc_SlotAsHorizontalBoxSlot_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_Event_MyGeometry) == 0x0002C0, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_Event_InDeltaTime) == 0x0002F8, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_13) == 0x000300, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_13' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_DynamicCast_bSuccess_13) == 0x000308, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_DynamicCast_bSuccess_13' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_Event_IsDesignTime) == 0x000309, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_14) == 0x000310, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_14' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_DynamicCast_bSuccess_14) == 0x000318, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_DynamicCast_bSuccess_14' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_15) == 0x000320, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_DynamicCast_AsBattle_Pass_Preview_Widget_15' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_DynamicCast_bSuccess_15) == 0x000328, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_DynamicCast_bSuccess_15' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, CallFunc_PlayAnimation_ReturnValue) == 0x000330, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, Temp_bool_Variable) == 0x000338, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, CallFunc_IsValid_ReturnValue_8) == 0x000339, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview, K2Node_Select_Default) == 0x00033A, "Member 'BattlePassPreview_C_ExecuteUbergraph_BattlePassPreview::K2Node_Select_Default' has a wrong offset!");

}

