#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Athena_Pickaxe_Generic

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_Athena_Pickaxe_Generic.B_Athena_Pickaxe_Generic_C
// 0x0060 (0x0B08 - 0x0AA8)
class AB_Athena_Pickaxe_Generic_C final : public AFortWeaponPickaxeAthena
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0AA8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UParticleSystemComponent*               MeleeHeavy_PSC;                                    // 0x0AB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	EAttachmentRule                               IdleFX_Location_Rule;                              // 0x0AB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAttachmentRule                               Idle_FX_Rotation_Rule;                             // 0x0AB9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAttachmentRule                               Idle_FX_Scale_Rule;                                // 0x0ABA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAttachmentRule                               SwingFX_Location_Rule;                             // 0x0ABB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAttachmentRule                               Swing_FX_Rotation_Rule;                            // 0x0ABC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAttachmentRule                               Swing_FX_Scale_Rule;                               // 0x0ABD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_ABE[0x2];                                      // 0x0ABE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        MeleeHeavy_ParticleSystem;                         // 0x0AC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        WeaponDurabilityDestroyEffect;                     // 0x0AC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        WeaponDurabilityDestroyEffectIcon;                 // 0x0AD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseDestroyEffect;                                  // 0x0AD8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AD9[0x7];                                      // 0x0AD9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimMontage*>                   PokeAnimations;                                    // 0x0AE0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UParticleSystemComponent*               Alteration_Ambient_PS;                             // 0x0AF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FVector                                Effects_Color_Level;                               // 0x0AF8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Equipped;                                          // 0x0B04(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_B_Athena_Pickaxe_Generic(int32 EntryPoint);
	void CandyCaneUpdate();
	void UpdateBasedOnKills();
	void HandleKillWatch();
	void OnInitWeaponCosmetics();
	void OnWeaponDetached();
	void OnWeaponVisibilityChanged(bool bVisible, bool bSetForLocalControllerOnly);
	void OnInitCosmeticAlterations(const struct FFortCosmeticModification& CosmeticMod);
	void OnWeaponAttached();
	void OnEquippedWeaponDestory();
	void OnPlayImpactFX(const struct FHitResult& HitResult, EPhysicalSurface ImpactPhysicalSurface, class UFXSystemComponent* SpawnedPSC);
	void PlayRClickImpacts();
	void OnPlayWeaponFireFX(bool bPersistentFire, bool bSecondaryFire);
	void MeleeSwingLeft_End();
	void MeleeSwingRight_End();
	void FootStepRight();
	void FootStepLeft();
	void MeleeSwingLeft(bool First_Left);
	void MeleeSwingRight(bool First_Right);
	void OnLoaded_F1C7B8E24518F4F2DE2C8DBABB95E06D(class UObject* Loaded);
	void OnStatChanged_474968D544EA73072EAB00877752DE97(class FName StatName, int32 StatValue);
	void UserConstructionScript();
	void SetWpnRarity();
	void SetActiveAlterationIdleParticles(bool Active, bool Reset);
	void PlayCQCPickaxeEnemyAudio(const struct FHitResult& Hit_Result);
	void Melee_Effect_Color(struct FVector* Melee_Color_Set);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_Athena_Pickaxe_Generic_C">();
	}
	static class AB_Athena_Pickaxe_Generic_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_Athena_Pickaxe_Generic_C>();
	}
};
static_assert(alignof(AB_Athena_Pickaxe_Generic_C) == 0x000008, "Wrong alignment on AB_Athena_Pickaxe_Generic_C");
static_assert(sizeof(AB_Athena_Pickaxe_Generic_C) == 0x000B08, "Wrong size on AB_Athena_Pickaxe_Generic_C");
static_assert(offsetof(AB_Athena_Pickaxe_Generic_C, UberGraphFrame) == 0x000AA8, "Member 'AB_Athena_Pickaxe_Generic_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AB_Athena_Pickaxe_Generic_C, MeleeHeavy_PSC) == 0x000AB0, "Member 'AB_Athena_Pickaxe_Generic_C::MeleeHeavy_PSC' has a wrong offset!");
static_assert(offsetof(AB_Athena_Pickaxe_Generic_C, IdleFX_Location_Rule) == 0x000AB8, "Member 'AB_Athena_Pickaxe_Generic_C::IdleFX_Location_Rule' has a wrong offset!");
static_assert(offsetof(AB_Athena_Pickaxe_Generic_C, Idle_FX_Rotation_Rule) == 0x000AB9, "Member 'AB_Athena_Pickaxe_Generic_C::Idle_FX_Rotation_Rule' has a wrong offset!");
static_assert(offsetof(AB_Athena_Pickaxe_Generic_C, Idle_FX_Scale_Rule) == 0x000ABA, "Member 'AB_Athena_Pickaxe_Generic_C::Idle_FX_Scale_Rule' has a wrong offset!");
static_assert(offsetof(AB_Athena_Pickaxe_Generic_C, SwingFX_Location_Rule) == 0x000ABB, "Member 'AB_Athena_Pickaxe_Generic_C::SwingFX_Location_Rule' has a wrong offset!");
static_assert(offsetof(AB_Athena_Pickaxe_Generic_C, Swing_FX_Rotation_Rule) == 0x000ABC, "Member 'AB_Athena_Pickaxe_Generic_C::Swing_FX_Rotation_Rule' has a wrong offset!");
static_assert(offsetof(AB_Athena_Pickaxe_Generic_C, Swing_FX_Scale_Rule) == 0x000ABD, "Member 'AB_Athena_Pickaxe_Generic_C::Swing_FX_Scale_Rule' has a wrong offset!");
static_assert(offsetof(AB_Athena_Pickaxe_Generic_C, MeleeHeavy_ParticleSystem) == 0x000AC0, "Member 'AB_Athena_Pickaxe_Generic_C::MeleeHeavy_ParticleSystem' has a wrong offset!");
static_assert(offsetof(AB_Athena_Pickaxe_Generic_C, WeaponDurabilityDestroyEffect) == 0x000AC8, "Member 'AB_Athena_Pickaxe_Generic_C::WeaponDurabilityDestroyEffect' has a wrong offset!");
static_assert(offsetof(AB_Athena_Pickaxe_Generic_C, WeaponDurabilityDestroyEffectIcon) == 0x000AD0, "Member 'AB_Athena_Pickaxe_Generic_C::WeaponDurabilityDestroyEffectIcon' has a wrong offset!");
static_assert(offsetof(AB_Athena_Pickaxe_Generic_C, UseDestroyEffect) == 0x000AD8, "Member 'AB_Athena_Pickaxe_Generic_C::UseDestroyEffect' has a wrong offset!");
static_assert(offsetof(AB_Athena_Pickaxe_Generic_C, PokeAnimations) == 0x000AE0, "Member 'AB_Athena_Pickaxe_Generic_C::PokeAnimations' has a wrong offset!");
static_assert(offsetof(AB_Athena_Pickaxe_Generic_C, Alteration_Ambient_PS) == 0x000AF0, "Member 'AB_Athena_Pickaxe_Generic_C::Alteration_Ambient_PS' has a wrong offset!");
static_assert(offsetof(AB_Athena_Pickaxe_Generic_C, Effects_Color_Level) == 0x000AF8, "Member 'AB_Athena_Pickaxe_Generic_C::Effects_Color_Level' has a wrong offset!");
static_assert(offsetof(AB_Athena_Pickaxe_Generic_C, Equipped) == 0x000B04, "Member 'AB_Athena_Pickaxe_Generic_C::Equipped' has a wrong offset!");

}

