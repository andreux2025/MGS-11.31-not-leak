#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Deimos_Fiend

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "EnemyPawn_Parent_Deimos_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Deimos_Fiend.Deimos_Fiend_C
// 0x0260 (0x26F0 - 0x2490)
class ADeimos_Fiend_C final : public AEnemyPawn_Parent_Deimos_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Deimos_Fiend_C;                     // 0x2490(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         HitCount;                                          // 0x2498(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastTakeHitTime;                                   // 0x249C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  TC_HitReactionAdditiveSingleOneShot;               // 0x24A0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_HitReactionAdditiveLoop;                        // 0x24C0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_HitReactionFullBody;                            // 0x24E0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_HitReactionBlockAll;                            // 0x2500(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_HitReactionBlockMelee;                          // 0x2520(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_HitReactionBlockRanged;                         // 0x2540(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          HitReactForMelee;                                  // 0x2560(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2561[0x7];                                     // 0x2561(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        ImpactParticles_Default;                           // 0x2568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        ImpactParticles_HumanFlesh;                        // 0x2570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        ImpactParticles_Wood;                              // 0x2578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        ImpactParticles_Stone;                             // 0x2580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        ImpactParticles_Metal;                             // 0x2588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MeleeImpact_UseSocketTransforms;                   // 0x2590(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2591[0x3];                                     // 0x2591(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Impact_MeleeSocket;                                // 0x2594(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHeadshot_HideHead;                               // 0x259C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_259D[0x3];                                     // 0x259D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PreviousLargestDeathRadius;                        // 0x25A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25A4[0x4];                                     // 0x25A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Death_Normal_Sound_Deimos_Fiend_C;                 // 0x25A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Death_RedLaser_Sound;                              // 0x25B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        Spawn_Dust_Particles;                              // 0x25B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SafetyTimerDuration;                               // 0x25C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DeathFX_HQ;                                        // 0x25C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25C5[0x3];                                     // 0x25C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Diffuse_Texture;                                   // 0x25C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeimosKnockBackValue;                              // 0x25D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MonsterType;                                       // 0x25D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FGameplayCueParameters                 CueParamsSpawnFiend;                               // 0x25D8(0x00B8)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UMaterialInstance*                      MaskedDeathMaterial;                               // 0x2690(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MID_MaskedDeathMaterial;                           // 0x2698(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MID_MonsterMaterial;                               // 0x26A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           EnemyColor;                                        // 0x26A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_DeimosShieldOnFiendKill;                        // 0x26B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         FreezeDuration;                                    // 0x26C0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           SpawnFXGC;                                         // 0x26E0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Deimos_Fiend(int32 EntryPoint);
	void RemoveChillerMaterial();
	void GameplayCue_Athena_IceDeimos(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void CustomOnDied(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void AnimateDeathMaterial();
	void GameplayCue_Impact_Physical_Creature(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void PortalCollision(bool Collide_);
	void PortalFX();
	void PortalGet(class ABuildingActor* BuildingActor, const TArray<class ABuildingActor*>& BuildingActorList, class AActor* BT);
	void TakerSoulSuckInterrupted();
	void PortalClear();
	void PortalAdd(class ABuildingActor* BuildingActor, const TArray<class ABuildingActor*>& BuildingActorList);
	void TakerSoulSuckSoundEnd();
	void TakerSoulSuckSoundBegin(bool Success);
	void TakerAttackFSM(bool SuccessfulHit);
	void IsTakerWallPortalAvailable(bool Portal_Available_);
	void TakerWallPortalBehavior(class AActor* BuildingPart, class UBTTask_BlueprintBase* Task, const struct FVector& DesiredMoveLocation, bool Debug);
	void EndTakerSwoopAttack();
	void BeginTakerSwoopAttack();
	void ResetTakerSpecialAttackTimer(bool Swoop, bool SoulSuckMelee, bool Portal);
	void VerifyTakerAttack(bool SpecialAttack, bool Swoop, bool Soul_Suck, bool Portal);
	void HuskEvadeStart();
	void MantleEnd();
	void MantleStart(const struct FVector& StartPos, const struct FVector& MidPos, const struct FVector& EndPos, bool LowWall, bool MidWall, bool FullWall, bool WindowWall);
	void OnRep_HasBackPack();
	void SetupMIDs();
	void Temp_FindClosestBone(const struct FVector& HitLocation, class FName* ClosestBone);
	void OnStartedEncounterSpawn();
	void ReceiveBeginPlay();

	void GetEnemyColor(struct FLinearColor* Color) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Deimos_Fiend_C">();
	}
	static class ADeimos_Fiend_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADeimos_Fiend_C>();
	}
};
static_assert(alignof(ADeimos_Fiend_C) == 0x000010, "Wrong alignment on ADeimos_Fiend_C");
static_assert(sizeof(ADeimos_Fiend_C) == 0x0026F0, "Wrong size on ADeimos_Fiend_C");
static_assert(offsetof(ADeimos_Fiend_C, UberGraphFrame_Deimos_Fiend_C) == 0x002490, "Member 'ADeimos_Fiend_C::UberGraphFrame_Deimos_Fiend_C' has a wrong offset!");
static_assert(offsetof(ADeimos_Fiend_C, HitCount) == 0x002498, "Member 'ADeimos_Fiend_C::HitCount' has a wrong offset!");
static_assert(offsetof(ADeimos_Fiend_C, LastTakeHitTime) == 0x00249C, "Member 'ADeimos_Fiend_C::LastTakeHitTime' has a wrong offset!");
static_assert(offsetof(ADeimos_Fiend_C, TC_HitReactionAdditiveSingleOneShot) == 0x0024A0, "Member 'ADeimos_Fiend_C::TC_HitReactionAdditiveSingleOneShot' has a wrong offset!");
static_assert(offsetof(ADeimos_Fiend_C, TC_HitReactionAdditiveLoop) == 0x0024C0, "Member 'ADeimos_Fiend_C::TC_HitReactionAdditiveLoop' has a wrong offset!");
static_assert(offsetof(ADeimos_Fiend_C, TC_HitReactionFullBody) == 0x0024E0, "Member 'ADeimos_Fiend_C::TC_HitReactionFullBody' has a wrong offset!");
static_assert(offsetof(ADeimos_Fiend_C, TC_HitReactionBlockAll) == 0x002500, "Member 'ADeimos_Fiend_C::TC_HitReactionBlockAll' has a wrong offset!");
static_assert(offsetof(ADeimos_Fiend_C, TC_HitReactionBlockMelee) == 0x002520, "Member 'ADeimos_Fiend_C::TC_HitReactionBlockMelee' has a wrong offset!");
static_assert(offsetof(ADeimos_Fiend_C, TC_HitReactionBlockRanged) == 0x002540, "Member 'ADeimos_Fiend_C::TC_HitReactionBlockRanged' has a wrong offset!");
static_assert(offsetof(ADeimos_Fiend_C, HitReactForMelee) == 0x002560, "Member 'ADeimos_Fiend_C::HitReactForMelee' has a wrong offset!");
static_assert(offsetof(ADeimos_Fiend_C, ImpactParticles_Default) == 0x002568, "Member 'ADeimos_Fiend_C::ImpactParticles_Default' has a wrong offset!");
static_assert(offsetof(ADeimos_Fiend_C, ImpactParticles_HumanFlesh) == 0x002570, "Member 'ADeimos_Fiend_C::ImpactParticles_HumanFlesh' has a wrong offset!");
static_assert(offsetof(ADeimos_Fiend_C, ImpactParticles_Wood) == 0x002578, "Member 'ADeimos_Fiend_C::ImpactParticles_Wood' has a wrong offset!");
static_assert(offsetof(ADeimos_Fiend_C, ImpactParticles_Stone) == 0x002580, "Member 'ADeimos_Fiend_C::ImpactParticles_Stone' has a wrong offset!");
static_assert(offsetof(ADeimos_Fiend_C, ImpactParticles_Metal) == 0x002588, "Member 'ADeimos_Fiend_C::ImpactParticles_Metal' has a wrong offset!");
static_assert(offsetof(ADeimos_Fiend_C, MeleeImpact_UseSocketTransforms) == 0x002590, "Member 'ADeimos_Fiend_C::MeleeImpact_UseSocketTransforms' has a wrong offset!");
static_assert(offsetof(ADeimos_Fiend_C, Impact_MeleeSocket) == 0x002594, "Member 'ADeimos_Fiend_C::Impact_MeleeSocket' has a wrong offset!");
static_assert(offsetof(ADeimos_Fiend_C, IsHeadshot_HideHead) == 0x00259C, "Member 'ADeimos_Fiend_C::IsHeadshot_HideHead' has a wrong offset!");
static_assert(offsetof(ADeimos_Fiend_C, PreviousLargestDeathRadius) == 0x0025A0, "Member 'ADeimos_Fiend_C::PreviousLargestDeathRadius' has a wrong offset!");
static_assert(offsetof(ADeimos_Fiend_C, Death_Normal_Sound_Deimos_Fiend_C) == 0x0025A8, "Member 'ADeimos_Fiend_C::Death_Normal_Sound_Deimos_Fiend_C' has a wrong offset!");
static_assert(offsetof(ADeimos_Fiend_C, Death_RedLaser_Sound) == 0x0025B0, "Member 'ADeimos_Fiend_C::Death_RedLaser_Sound' has a wrong offset!");
static_assert(offsetof(ADeimos_Fiend_C, Spawn_Dust_Particles) == 0x0025B8, "Member 'ADeimos_Fiend_C::Spawn_Dust_Particles' has a wrong offset!");
static_assert(offsetof(ADeimos_Fiend_C, SafetyTimerDuration) == 0x0025C0, "Member 'ADeimos_Fiend_C::SafetyTimerDuration' has a wrong offset!");
static_assert(offsetof(ADeimos_Fiend_C, DeathFX_HQ) == 0x0025C4, "Member 'ADeimos_Fiend_C::DeathFX_HQ' has a wrong offset!");
static_assert(offsetof(ADeimos_Fiend_C, Diffuse_Texture) == 0x0025C8, "Member 'ADeimos_Fiend_C::Diffuse_Texture' has a wrong offset!");
static_assert(offsetof(ADeimos_Fiend_C, DeimosKnockBackValue) == 0x0025D0, "Member 'ADeimos_Fiend_C::DeimosKnockBackValue' has a wrong offset!");
static_assert(offsetof(ADeimos_Fiend_C, MonsterType) == 0x0025D4, "Member 'ADeimos_Fiend_C::MonsterType' has a wrong offset!");
static_assert(offsetof(ADeimos_Fiend_C, CueParamsSpawnFiend) == 0x0025D8, "Member 'ADeimos_Fiend_C::CueParamsSpawnFiend' has a wrong offset!");
static_assert(offsetof(ADeimos_Fiend_C, MaskedDeathMaterial) == 0x002690, "Member 'ADeimos_Fiend_C::MaskedDeathMaterial' has a wrong offset!");
static_assert(offsetof(ADeimos_Fiend_C, MID_MaskedDeathMaterial) == 0x002698, "Member 'ADeimos_Fiend_C::MID_MaskedDeathMaterial' has a wrong offset!");
static_assert(offsetof(ADeimos_Fiend_C, MID_MonsterMaterial) == 0x0026A0, "Member 'ADeimos_Fiend_C::MID_MonsterMaterial' has a wrong offset!");
static_assert(offsetof(ADeimos_Fiend_C, EnemyColor) == 0x0026A8, "Member 'ADeimos_Fiend_C::EnemyColor' has a wrong offset!");
static_assert(offsetof(ADeimos_Fiend_C, GE_DeimosShieldOnFiendKill) == 0x0026B8, "Member 'ADeimos_Fiend_C::GE_DeimosShieldOnFiendKill' has a wrong offset!");
static_assert(offsetof(ADeimos_Fiend_C, FreezeDuration) == 0x0026C0, "Member 'ADeimos_Fiend_C::FreezeDuration' has a wrong offset!");
static_assert(offsetof(ADeimos_Fiend_C, SpawnFXGC) == 0x0026E0, "Member 'ADeimos_Fiend_C::SpawnFXGC' has a wrong offset!");

}

