#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ActivatableMovieWidget_Monolithic

#include "Basic.hpp"

#include "ActivatableMovieWidget_Monolithic_classes.hpp"
#include "ActivatableMovieWidget_Monolithic_parameters.hpp"


namespace SDK
{

// Function ActivatableMovieWidget_Monolithic.ActivatableMovieWidget_Monolithic_C.LoadFallbackVideo
// (Public, BlueprintCallable, BlueprintEvent)

void UActivatableMovieWidget_Monolithic_C::LoadFallbackVideo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActivatableMovieWidget_Monolithic_C", "LoadFallbackVideo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ActivatableMovieWidget_Monolithic.ActivatableMovieWidget_Monolithic_C.StreamedVideoOnError
// (Public, BlueprintCallable, BlueprintEvent)

void UActivatableMovieWidget_Monolithic_C::StreamedVideoOnError()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActivatableMovieWidget_Monolithic_C", "StreamedVideoOnError");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ActivatableMovieWidget_Monolithic.ActivatableMovieWidget_Monolithic_C.StreamedVideoOnOpenFailure
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           URL                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UActivatableMovieWidget_Monolithic_C::StreamedVideoOnOpenFailure(const class FString& URL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActivatableMovieWidget_Monolithic_C", "StreamedVideoOnOpenFailure");

	Params::ActivatableMovieWidget_Monolithic_C_StreamedVideoOnOpenFailure Parms{};

	Parms.URL = std::move(URL);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ActivatableMovieWidget_Monolithic.ActivatableMovieWidget_Monolithic_C.StreamedVideoOnUrlFailure
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           URL                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UActivatableMovieWidget_Monolithic_C::StreamedVideoOnUrlFailure(const class FString& URL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActivatableMovieWidget_Monolithic_C", "StreamedVideoOnUrlFailure");

	Params::ActivatableMovieWidget_Monolithic_C_StreamedVideoOnUrlFailure Parms{};

	Parms.URL = std::move(URL);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ActivatableMovieWidget_Monolithic.ActivatableMovieWidget_Monolithic_C.StreamedVideoOnUrlSuccess
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           URL                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UActivatableMovieWidget_Monolithic_C::StreamedVideoOnUrlSuccess(const class FString& URL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActivatableMovieWidget_Monolithic_C", "StreamedVideoOnUrlSuccess");

	Params::ActivatableMovieWidget_Monolithic_C_StreamedVideoOnUrlSuccess Parms{};

	Parms.URL = std::move(URL);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ActivatableMovieWidget_Monolithic.ActivatableMovieWidget_Monolithic_C.StreamedVideoOnMediaOpened
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           URL                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UActivatableMovieWidget_Monolithic_C::StreamedVideoOnMediaOpened(const class FString& URL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActivatableMovieWidget_Monolithic_C", "StreamedVideoOnMediaOpened");

	Params::ActivatableMovieWidget_Monolithic_C_StreamedVideoOnMediaOpened Parms{};

	Parms.URL = std::move(URL);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ActivatableMovieWidget_Monolithic.ActivatableMovieWidget_Monolithic_C.StreamedVideoOnSkipButtonClicked
// (Public, BlueprintCallable, BlueprintEvent)

void UActivatableMovieWidget_Monolithic_C::StreamedVideoOnSkipButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActivatableMovieWidget_Monolithic_C", "StreamedVideoOnSkipButtonClicked");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ActivatableMovieWidget_Monolithic.ActivatableMovieWidget_Monolithic_C.StreamedVideoOnMediaPlayerEndReached
// (Public, BlueprintCallable, BlueprintEvent)

void UActivatableMovieWidget_Monolithic_C::StreamedVideoOnMediaPlayerEndReached()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActivatableMovieWidget_Monolithic_C", "StreamedVideoOnMediaPlayerEndReached");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ActivatableMovieWidget_Monolithic.ActivatableMovieWidget_Monolithic_C.StreamedVideoOpeningTimedOut
// (Public, BlueprintCallable, BlueprintEvent)

void UActivatableMovieWidget_Monolithic_C::StreamedVideoOpeningTimedOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActivatableMovieWidget_Monolithic_C", "StreamedVideoOpeningTimedOut");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ActivatableMovieWidget_Monolithic.ActivatableMovieWidget_Monolithic_C.StreamedVideoOnSkipBeforeVideoURLReceived
// (Public, BlueprintCallable, BlueprintEvent)

void UActivatableMovieWidget_Monolithic_C::StreamedVideoOnSkipBeforeVideoURLReceived()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActivatableMovieWidget_Monolithic_C", "StreamedVideoOnSkipBeforeVideoURLReceived");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ActivatableMovieWidget_Monolithic.ActivatableMovieWidget_Monolithic_C.ModifyStreamSourceTemplate
// (Public, BlueprintCallable, BlueprintEvent)

void UActivatableMovieWidget_Monolithic_C::ModifyStreamSourceTemplate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActivatableMovieWidget_Monolithic_C", "ModifyStreamSourceTemplate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ActivatableMovieWidget_Monolithic.ActivatableMovieWidget_Monolithic_C.LoadStreamingVideo
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UFortStreamMediaSource*           StreamingMediaSource                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             VideoString_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             StreamingVideoID_0                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             FallbackVideoID_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ProdLinkID_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           GameDevLinkID_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsAutoplay_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ForceAutoplay                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    StreamingEnabled                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FString                           VideoUID_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    NoAutoPlay                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UFortStreamMediaSource*           MediaSource                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UActivatableMovieWidget_Monolithic_C::LoadStreamingVideo(class UFortStreamMediaSource* StreamingMediaSource, class FName VideoString_0, class FName StreamingVideoID_0, class FName FallbackVideoID_0, const class FString& ProdLinkID_0, const class FString& GameDevLinkID_0, bool IsAutoplay_0, bool ForceAutoplay, bool StreamingEnabled, const class FString& VideoUID_0, bool* NoAutoPlay, class UFortStreamMediaSource** MediaSource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActivatableMovieWidget_Monolithic_C", "LoadStreamingVideo");

	Params::ActivatableMovieWidget_Monolithic_C_LoadStreamingVideo Parms{};

	Parms.StreamingMediaSource = StreamingMediaSource;
	Parms.VideoString_0 = VideoString_0;
	Parms.StreamingVideoID_0 = StreamingVideoID_0;
	Parms.FallbackVideoID_0 = FallbackVideoID_0;
	Parms.ProdLinkID_0 = std::move(ProdLinkID_0);
	Parms.GameDevLinkID_0 = std::move(GameDevLinkID_0);
	Parms.IsAutoplay_0 = IsAutoplay_0;
	Parms.ForceAutoplay = ForceAutoplay;
	Parms.StreamingEnabled = StreamingEnabled;
	Parms.VideoUID_0 = std::move(VideoUID_0);

	UObject::ProcessEvent(Func, &Parms);

	if (NoAutoPlay != nullptr)
		*NoAutoPlay = Parms.NoAutoPlay;

	if (MediaSource != nullptr)
		*MediaSource = Parms.MediaSource;
}

}

