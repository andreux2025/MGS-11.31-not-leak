#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Prj_Athena_FloppingRabbit

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "B_Prj_ThrownConsumable_classes.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Prj_Athena_FloppingRabbit.Prj_Athena_FloppingRabbit_C
// 0x02A8 (0x0B70 - 0x08C8)
class APrj_Athena_FloppingRabbit_C final : public AB_Prj_ThrownConsumable_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Prj_Athena_FloppingRabbit_C;        // 0x08C8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        LineLoc;                                           // 0x08D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         BigBob_BigDip_9789CB934FE6D3F1A956D993031B4307;    // 0x08D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            BigBob__Direction_9789CB934FE6D3F1A956D993031B4307; // 0x08DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8DD[0x3];                                      // 0x08DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     BigBob;                                            // 0x08E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             NullHit;                                           // 0x08E8(0x0088)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FRotator                               WaterRotation;                                     // 0x0970(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                MeshLocAfterHit;                                   // 0x097C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ChanceForBigBob;                                   // 0x0988(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_98C[0x4];                                      // 0x098C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0990(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         DistanceCheckInterval;                             // 0x09A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9A4[0x4];                                      // 0x09A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Spawner;                                           // 0x09A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartingCatchBigBobChance;                         // 0x09B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Delay_CatchWindow;                                 // 0x09B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanCatch;                                          // 0x09B8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          InWater;                                           // 0x09B9(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9BA[0x6];                                      // 0x09BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x09C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AB_Athena_FloppingRabbit_Wire_C*        Wire;                                              // 0x09C8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Event_Fire;                                        // 0x09D0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Event_InWorld;                                     // 0x09D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDistanceFromPlayer;                             // 0x09E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DefaultSpawner;                                    // 0x09E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9E5[0x3];                                      // 0x09E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IncreaseBigBobChanceAmount;                        // 0x09E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9EC[0x4];                                      // 0x09EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Row_ChanceForBigBob;                               // 0x09F0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_ChanceForBigBobIncrease;                       // 0x0A10(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_CatchWindow;                                   // 0x0A30(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UParticleSystem*                        FX_HitWater;                                       // 0x0A50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FXScaleHitWater;                                   // 0x0A58(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A64[0x4];                                      // 0x0A64(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Sound_HitWater;                                    // 0x0A68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        FX_WaterDip;                                       // 0x0A70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        FX_WaterDip_HighTier;                              // 0x0A78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FXScaleWaterDip;                                   // 0x0A80(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A8C[0x4];                                      // 0x0A8C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Sound_WaterDip;                                    // 0x0A90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Event_ProjDestroyed;                               // 0x0A98(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         Row_DistanceCheck;                                 // 0x0AA0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_DistanceCheckZ;                                // 0x0AC0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Dipping;                                           // 0x0AE0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AE1[0x7];                                      // 0x0AE1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 SpawnedDefaultSpawner;                             // 0x0AE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         Row_BobChanceDelayMin;                             // 0x0AF0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_BobChanceDelayMax;                             // 0x0B10(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          SpawnedItem;                                       // 0x0B30(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B31[0x7];                                      // 0x0B31(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_FluidSim_FN_C*                      FluidSim;                                          // 0x0B38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Sound_WaterDip_HighTier;                           // 0x0B40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WorldSpawner;                                      // 0x0B48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B49[0x7];                                      // 0x0B49(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        FX_SpawnItems;                                     // 0x0B50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Sound_SpawnItems;                                  // 0x0B58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ItemAttachMinDist;                                 // 0x0B60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ItemAttachDistanceRequirement;                     // 0x0B64(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bStartedFishingSession;                            // 0x0B68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_Prj_Athena_FloppingRabbit(int32 EntryPoint);
	void WriteNothingCaughtFishingAnalytic();
	void CustomPickupAttach(class AFortPickup* FortPickup);
	void SpawnItemsFX();
	void CheckForHighTierSpawner();
	void CheckForDip();
	void ReceiveDestroyed();
	void HitWater(bool FishSpawner);
	void ForceKill();
	void DistanceCheck();
	void HideAndKill();
	void TryCatch();
	void CatchWindow();
	void FullDip(bool InWorldSpawner);
	void BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BigBob__UpdateFunc();
	void BigBob__FinishedFunc();
	void GetSheetVals();
	void OnExploded(const TArray<class AActor*>& HitActors, const TArray<struct FHitResult>& HitResults);
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Prj_Athena_FloppingRabbit_C">();
	}
	static class APrj_Athena_FloppingRabbit_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APrj_Athena_FloppingRabbit_C>();
	}
};
static_assert(alignof(APrj_Athena_FloppingRabbit_C) == 0x000008, "Wrong alignment on APrj_Athena_FloppingRabbit_C");
static_assert(sizeof(APrj_Athena_FloppingRabbit_C) == 0x000B70, "Wrong size on APrj_Athena_FloppingRabbit_C");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, UberGraphFrame_Prj_Athena_FloppingRabbit_C) == 0x0008C8, "Member 'APrj_Athena_FloppingRabbit_C::UberGraphFrame_Prj_Athena_FloppingRabbit_C' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, LineLoc) == 0x0008D0, "Member 'APrj_Athena_FloppingRabbit_C::LineLoc' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, BigBob_BigDip_9789CB934FE6D3F1A956D993031B4307) == 0x0008D8, "Member 'APrj_Athena_FloppingRabbit_C::BigBob_BigDip_9789CB934FE6D3F1A956D993031B4307' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, BigBob__Direction_9789CB934FE6D3F1A956D993031B4307) == 0x0008DC, "Member 'APrj_Athena_FloppingRabbit_C::BigBob__Direction_9789CB934FE6D3F1A956D993031B4307' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, BigBob) == 0x0008E0, "Member 'APrj_Athena_FloppingRabbit_C::BigBob' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, NullHit) == 0x0008E8, "Member 'APrj_Athena_FloppingRabbit_C::NullHit' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, WaterRotation) == 0x000970, "Member 'APrj_Athena_FloppingRabbit_C::WaterRotation' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, MeshLocAfterHit) == 0x00097C, "Member 'APrj_Athena_FloppingRabbit_C::MeshLocAfterHit' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, ChanceForBigBob) == 0x000988, "Member 'APrj_Athena_FloppingRabbit_C::ChanceForBigBob' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, ObjectTypes) == 0x000990, "Member 'APrj_Athena_FloppingRabbit_C::ObjectTypes' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, DistanceCheckInterval) == 0x0009A0, "Member 'APrj_Athena_FloppingRabbit_C::DistanceCheckInterval' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, Spawner) == 0x0009A8, "Member 'APrj_Athena_FloppingRabbit_C::Spawner' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, StartingCatchBigBobChance) == 0x0009B0, "Member 'APrj_Athena_FloppingRabbit_C::StartingCatchBigBobChance' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, Delay_CatchWindow) == 0x0009B4, "Member 'APrj_Athena_FloppingRabbit_C::Delay_CatchWindow' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, CanCatch) == 0x0009B8, "Member 'APrj_Athena_FloppingRabbit_C::CanCatch' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, InWater) == 0x0009B9, "Member 'APrj_Athena_FloppingRabbit_C::InWater' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, PlayerPawn) == 0x0009C0, "Member 'APrj_Athena_FloppingRabbit_C::PlayerPawn' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, Wire) == 0x0009C8, "Member 'APrj_Athena_FloppingRabbit_C::Wire' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, Event_Fire) == 0x0009D0, "Member 'APrj_Athena_FloppingRabbit_C::Event_Fire' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, Event_InWorld) == 0x0009D8, "Member 'APrj_Athena_FloppingRabbit_C::Event_InWorld' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, MaxDistanceFromPlayer) == 0x0009E0, "Member 'APrj_Athena_FloppingRabbit_C::MaxDistanceFromPlayer' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, DefaultSpawner) == 0x0009E4, "Member 'APrj_Athena_FloppingRabbit_C::DefaultSpawner' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, IncreaseBigBobChanceAmount) == 0x0009E8, "Member 'APrj_Athena_FloppingRabbit_C::IncreaseBigBobChanceAmount' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, Row_ChanceForBigBob) == 0x0009F0, "Member 'APrj_Athena_FloppingRabbit_C::Row_ChanceForBigBob' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, Row_ChanceForBigBobIncrease) == 0x000A10, "Member 'APrj_Athena_FloppingRabbit_C::Row_ChanceForBigBobIncrease' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, Row_CatchWindow) == 0x000A30, "Member 'APrj_Athena_FloppingRabbit_C::Row_CatchWindow' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, FX_HitWater) == 0x000A50, "Member 'APrj_Athena_FloppingRabbit_C::FX_HitWater' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, FXScaleHitWater) == 0x000A58, "Member 'APrj_Athena_FloppingRabbit_C::FXScaleHitWater' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, Sound_HitWater) == 0x000A68, "Member 'APrj_Athena_FloppingRabbit_C::Sound_HitWater' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, FX_WaterDip) == 0x000A70, "Member 'APrj_Athena_FloppingRabbit_C::FX_WaterDip' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, FX_WaterDip_HighTier) == 0x000A78, "Member 'APrj_Athena_FloppingRabbit_C::FX_WaterDip_HighTier' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, FXScaleWaterDip) == 0x000A80, "Member 'APrj_Athena_FloppingRabbit_C::FXScaleWaterDip' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, Sound_WaterDip) == 0x000A90, "Member 'APrj_Athena_FloppingRabbit_C::Sound_WaterDip' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, Event_ProjDestroyed) == 0x000A98, "Member 'APrj_Athena_FloppingRabbit_C::Event_ProjDestroyed' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, Row_DistanceCheck) == 0x000AA0, "Member 'APrj_Athena_FloppingRabbit_C::Row_DistanceCheck' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, Row_DistanceCheckZ) == 0x000AC0, "Member 'APrj_Athena_FloppingRabbit_C::Row_DistanceCheckZ' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, Dipping) == 0x000AE0, "Member 'APrj_Athena_FloppingRabbit_C::Dipping' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, SpawnedDefaultSpawner) == 0x000AE8, "Member 'APrj_Athena_FloppingRabbit_C::SpawnedDefaultSpawner' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, Row_BobChanceDelayMin) == 0x000AF0, "Member 'APrj_Athena_FloppingRabbit_C::Row_BobChanceDelayMin' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, Row_BobChanceDelayMax) == 0x000B10, "Member 'APrj_Athena_FloppingRabbit_C::Row_BobChanceDelayMax' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, SpawnedItem) == 0x000B30, "Member 'APrj_Athena_FloppingRabbit_C::SpawnedItem' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, FluidSim) == 0x000B38, "Member 'APrj_Athena_FloppingRabbit_C::FluidSim' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, Sound_WaterDip_HighTier) == 0x000B40, "Member 'APrj_Athena_FloppingRabbit_C::Sound_WaterDip_HighTier' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, WorldSpawner) == 0x000B48, "Member 'APrj_Athena_FloppingRabbit_C::WorldSpawner' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, FX_SpawnItems) == 0x000B50, "Member 'APrj_Athena_FloppingRabbit_C::FX_SpawnItems' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, Sound_SpawnItems) == 0x000B58, "Member 'APrj_Athena_FloppingRabbit_C::Sound_SpawnItems' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, ItemAttachMinDist) == 0x000B60, "Member 'APrj_Athena_FloppingRabbit_C::ItemAttachMinDist' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, ItemAttachDistanceRequirement) == 0x000B64, "Member 'APrj_Athena_FloppingRabbit_C::ItemAttachDistanceRequirement' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, bStartedFishingSession) == 0x000B68, "Member 'APrj_Athena_FloppingRabbit_C::bStartedFishingSession' has a wrong offset!");

}

