#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Device_Volume_Floor

#include "Basic.hpp"

#include "Device_Volume_Floor_classes.hpp"
#include "Device_Volume_Floor_parameters.hpp"


namespace SDK
{

// Function Device_Volume_Floor.Device_Volume_Floor_C.ExecuteUbergraph_Device_Volume_Floor
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ADevice_Volume_Floor_C::ExecuteUbergraph_Device_Volume_Floor(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Device_Volume_Floor_C", "ExecuteUbergraph_Device_Volume_Floor");

	Params::Device_Volume_Floor_C_ExecuteUbergraph_Device_Volume_Floor Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Device_Volume_Floor.Device_Volume_Floor_C.Initialize Device
// (BlueprintCallable, BlueprintEvent)

void ADevice_Volume_Floor_C::Initialize_Device()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Device_Volume_Floor_C", "Initialize Device");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Device_Volume_Floor.Device_Volume_Floor_C.BndEvt__FortMinigameProgress_K2Node_ComponentBoundEvent_9_OnMinigameStateChanged__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class AFortMinigame*                    Minigame                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EFortMinigameState                      NewMinigameState                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ADevice_Volume_Floor_C::BndEvt__FortMinigameProgress_K2Node_ComponentBoundEvent_9_OnMinigameStateChanged__DelegateSignature(class AFortMinigame* Minigame, EFortMinigameState NewMinigameState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Device_Volume_Floor_C", "BndEvt__FortMinigameProgress_K2Node_ComponentBoundEvent_9_OnMinigameStateChanged__DelegateSignature");

	Params::Device_Volume_Floor_C_BndEvt__FortMinigameProgress_K2Node_ComponentBoundEvent_9_OnMinigameStateChanged__DelegateSignature Parms{};

	Parms.Minigame = Minigame;
	Parms.NewMinigameState = NewMinigameState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Device_Volume_Floor.Device_Volume_Floor_C.BndEvt__DisableWhenReceived_K2Node_ComponentBoundEvent_5_OnGameplayMessageReceived__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class AController*                      TriggerInstigator                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ADevice_Volume_Floor_C::BndEvt__DisableWhenReceived_K2Node_ComponentBoundEvent_5_OnGameplayMessageReceived__DelegateSignature(class AController* TriggerInstigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Device_Volume_Floor_C", "BndEvt__DisableWhenReceived_K2Node_ComponentBoundEvent_5_OnGameplayMessageReceived__DelegateSignature");

	Params::Device_Volume_Floor_C_BndEvt__DisableWhenReceived_K2Node_ComponentBoundEvent_5_OnGameplayMessageReceived__DelegateSignature Parms{};

	Parms.TriggerInstigator = TriggerInstigator;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Device_Volume_Floor.Device_Volume_Floor_C.BndEvt__EnableWhenReceived_K2Node_ComponentBoundEvent_4_OnGameplayMessageReceived__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class AController*                      TriggerInstigator                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ADevice_Volume_Floor_C::BndEvt__EnableWhenReceived_K2Node_ComponentBoundEvent_4_OnGameplayMessageReceived__DelegateSignature(class AController* TriggerInstigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Device_Volume_Floor_C", "BndEvt__EnableWhenReceived_K2Node_ComponentBoundEvent_4_OnGameplayMessageReceived__DelegateSignature");

	Params::Device_Volume_Floor_C_BndEvt__EnableWhenReceived_K2Node_ComponentBoundEvent_4_OnGameplayMessageReceived__DelegateSignature Parms{};

	Parms.TriggerInstigator = TriggerInstigator;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Device_Volume_Floor.Device_Volume_Floor_C.GameplayCue.Abilities.Activation.Traps.ActivateTrap
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EGameplayCueEvent                       EventType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayCueParameters           Parameters                                             (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)

void ADevice_Volume_Floor_C::GameplayCue_Abilities_Activation_Traps_ActivateTrap(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Device_Volume_Floor_C", "GameplayCue.Abilities.Activation.Traps.ActivateTrap");

	Params::Device_Volume_Floor_C_GameplayCue_Abilities_Activation_Traps_ActivateTrap Parms{};

	Parms.EventType = EventType;
	Parms.Parameters = std::move(Parameters);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Device_Volume_Floor.Device_Volume_Floor_C.BndEvt__ToyOptionsComponent_K2Node_ComponentBoundEvent_3_AnyPropertyChangedDelegate__DelegateSignature
// (BlueprintEvent)

void ADevice_Volume_Floor_C::BndEvt__ToyOptionsComponent_K2Node_ComponentBoundEvent_3_AnyPropertyChangedDelegate__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Device_Volume_Floor_C", "BndEvt__ToyOptionsComponent_K2Node_ComponentBoundEvent_3_AnyPropertyChangedDelegate__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Device_Volume_Floor.Device_Volume_Floor_C.BndEvt__ToyOptionsComponent_K2Node_ComponentBoundEvent_2_AnyPropertyChangedDelegate__DelegateSignature
// (BlueprintEvent)

void ADevice_Volume_Floor_C::BndEvt__ToyOptionsComponent_K2Node_ComponentBoundEvent_2_AnyPropertyChangedDelegate__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Device_Volume_Floor_C", "BndEvt__ToyOptionsComponent_K2Node_ComponentBoundEvent_2_AnyPropertyChangedDelegate__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Device_Volume_Floor.Device_Volume_Floor_C.OnPlaced
// (Event, Public, BlueprintEvent)

void ADevice_Volume_Floor_C::OnPlaced()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Device_Volume_Floor_C", "OnPlaced");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Device_Volume_Floor.Device_Volume_Floor_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ADevice_Volume_Floor_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Device_Volume_Floor_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Device_Volume_Floor.Device_Volume_Floor_C.UpdateVolumeSize
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ADevice_Volume_Floor_C::UpdateVolumeSize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Device_Volume_Floor_C", "UpdateVolumeSize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Device_Volume_Floor.Device_Volume_Floor_C.OnRep_ZoneSizePresetIndex
// (BlueprintCallable, BlueprintEvent)

void ADevice_Volume_Floor_C::OnRep_ZoneSizePresetIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Device_Volume_Floor_C", "OnRep_ZoneSizePresetIndex");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Device_Volume_Floor.Device_Volume_Floor_C.GetVolumeMID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UMaterialInstanceDynamic*         EliminationVolumeMID                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ADevice_Volume_Floor_C::GetVolumeMID(class UMaterialInstanceDynamic** EliminationVolumeMID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Device_Volume_Floor_C", "GetVolumeMID");

	Params::Device_Volume_Floor_C_GetVolumeMID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (EliminationVolumeMID != nullptr)
		*EliminationVolumeMID = Parms.EliminationVolumeMID;
}


// Function Device_Volume_Floor.Device_Volume_Floor_C.GetTriggerLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ADevice_Volume_Floor_C::GetTriggerLocation(struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Device_Volume_Floor_C", "GetTriggerLocation");

	Params::Device_Volume_Floor_C_GetTriggerLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function Device_Volume_Floor.Device_Volume_Floor_C.VFXParameters
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FParticleSysParam>        Array                                                  (Parm, OutParm, ZeroConstructor)

void ADevice_Volume_Floor_C::VFXParameters(TArray<struct FParticleSysParam>* Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Device_Volume_Floor_C", "VFXParameters");

	Params::Device_Volume_Floor_C_VFXParameters Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}


// Function Device_Volume_Floor.Device_Volume_Floor_C.UpdateMinigameVisuals
// (Public, BlueprintCallable, BlueprintEvent)

void ADevice_Volume_Floor_C::UpdateMinigameVisuals()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Device_Volume_Floor_C", "UpdateMinigameVisuals");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Device_Volume_Floor.Device_Volume_Floor_C.WasActivatedByOverlappingActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    bActivated                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ADevice_Volume_Floor_C::WasActivatedByOverlappingActor(bool* bActivated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Device_Volume_Floor_C", "WasActivatedByOverlappingActor");

	Params::Device_Volume_Floor_C_WasActivatedByOverlappingActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bActivated != nullptr)
		*bActivated = Parms.bActivated;
}


// Function Device_Volume_Floor.Device_Volume_Floor_C.BindOnExitVehicleForAffectPawn
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AFortPlayerPawnAthena*            AffectedPawn                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ADevice_Volume_Floor_C::BindOnExitVehicleForAffectPawn(class AFortPlayerPawnAthena* AffectedPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Device_Volume_Floor_C", "BindOnExitVehicleForAffectPawn");

	Params::Device_Volume_Floor_C_BindOnExitVehicleForAffectPawn Parms{};

	Parms.AffectedPawn = AffectedPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Device_Volume_Floor.Device_Volume_Floor_C.OnAffectedPlayerExitedVehicle
// (Public, BlueprintCallable, BlueprintEvent)

void ADevice_Volume_Floor_C::OnAffectedPlayerExitedVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Device_Volume_Floor_C", "OnAffectedPlayerExitedVehicle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Device_Volume_Floor.Device_Volume_Floor_C.OnRep_bEnabled
// (BlueprintCallable, BlueprintEvent)

void ADevice_Volume_Floor_C::OnRep_bEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Device_Volume_Floor_C", "OnRep_bEnabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Device_Volume_Floor.Device_Volume_Floor_C.EmptyCueParameters
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FGameplayCueParameters           ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference)

struct FGameplayCueParameters ADevice_Volume_Floor_C::EmptyCueParameters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Device_Volume_Floor_C", "EmptyCueParameters");

	Params::Device_Volume_Floor_C_EmptyCueParameters Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Device_Volume_Floor.Device_Volume_Floor_C.Update Volume State
// (Public, BlueprintCallable, BlueprintEvent)

void ADevice_Volume_Floor_C::Update_Volume_State()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Device_Volume_Floor_C", "Update Volume State");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Device_Volume_Floor.Device_Volume_Floor_C.Minigame State Logic
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EFortMinigameState                      State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ADevice_Volume_Floor_C::Minigame_State_Logic(EFortMinigameState State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Device_Volume_Floor_C", "Minigame State Logic");

	Params::Device_Volume_Floor_C_Minigame_State_Logic Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Device_Volume_Floor.Device_Volume_Floor_C.Transmit if Valid Actor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UFortGameplayTriggerMessageComponent*Transmitter                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Actor                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Enter                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ADevice_Volume_Floor_C::Transmit_if_Valid_Actor(class UFortGameplayTriggerMessageComponent* Transmitter, const class AActor* Actor, bool Enter, bool* Valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Device_Volume_Floor_C", "Transmit if Valid Actor");

	Params::Device_Volume_Floor_C_Transmit_if_Valid_Actor Parms{};

	Parms.Transmitter = Transmitter;
	Parms.Actor = Actor;
	Parms.Enter = Enter;

	UObject::ProcessEvent(Func, &Parms);

	if (Valid != nullptr)
		*Valid = Parms.Valid;
}


// Function Device_Volume_Floor.Device_Volume_Floor_C.UpdateVisuals
// (Public, BlueprintCallable, BlueprintEvent)

void ADevice_Volume_Floor_C::UpdateVisuals()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Device_Volume_Floor_C", "UpdateVisuals");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Device_Volume_Floor.Device_Volume_Floor_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ADevice_Volume_Floor_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Device_Volume_Floor_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}

}

