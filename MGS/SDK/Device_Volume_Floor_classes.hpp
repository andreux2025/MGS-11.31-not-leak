#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Device_Volume_Floor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BuildingToy_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Device_Volume_Floor.Device_Volume_Floor_C
// 0x00B0 (0x0D48 - 0x0C98)
class ADevice_Volume_Floor_C : public ABuildingToy_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Device_Volume_Floor_C;              // 0x0C98(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFortGameplayReceiverMessageComponent*  DisableWhenReceived;                               // 0x0CA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortGameplayReceiverMessageComponent*  EnableWhenReceived;                                // 0x0CA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x0CB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LightRays;                                         // 0x0CB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Frame;                                             // 0x0CC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Trigger;                                           // 0x0CC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0CD0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          ZoneVisibleInGame;                                 // 0x0CD8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CD9[0x3];                                      // 0x0CD9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ZoneZScale;                                        // 0x0CDC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ZoneXScale;                                        // 0x0CE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ZoneYScale;                                        // 0x0CE4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              TrapFireSound;                                     // 0x0CE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               VolumeMID;                                         // 0x0CF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ZoneEdgesSize;                                     // 0x0CF8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BlocksVolumeHigh;                                  // 0x0D04(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BlocksVolumeLow;                                   // 0x0D10(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TriggerLocationDotProduct;                         // 0x0D1C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ZoneProtectedTeam;                                 // 0x0D28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BaseMeshVisibleInGame;                             // 0x0D2C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D2D[0x3];                                      // 0x0D2D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         AffectedPlayersInVehicles;                         // 0x0D30(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          bDamageEmptyVehicles;                              // 0x0D40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDamagePlayers;                                    // 0x0D41(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDamageVehicles;                                   // 0x0D42(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDamageCreatures;                                  // 0x0D43(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          EnabledOnStart;                                    // 0x0D44(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bEnabled;                                          // 0x0D45(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)

public:
	void ExecuteUbergraph_Device_Volume_Floor(int32 EntryPoint);
	void Initialize_Device();
	void BndEvt__FortMinigameProgress_K2Node_ComponentBoundEvent_9_OnMinigameStateChanged__DelegateSignature(class AFortMinigame* Minigame, EFortMinigameState NewMinigameState);
	void BndEvt__DisableWhenReceived_K2Node_ComponentBoundEvent_5_OnGameplayMessageReceived__DelegateSignature(class AController* TriggerInstigator);
	void BndEvt__EnableWhenReceived_K2Node_ComponentBoundEvent_4_OnGameplayMessageReceived__DelegateSignature(class AController* TriggerInstigator);
	void GameplayCue_Abilities_Activation_Traps_ActivateTrap(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void BndEvt__ToyOptionsComponent_K2Node_ComponentBoundEvent_3_AnyPropertyChangedDelegate__DelegateSignature();
	void BndEvt__ToyOptionsComponent_K2Node_ComponentBoundEvent_2_AnyPropertyChangedDelegate__DelegateSignature();
	void OnPlaced();
	void UserConstructionScript();
	void UpdateVolumeSize();
	void OnRep_ZoneSizePresetIndex();
	void GetVolumeMID(class UMaterialInstanceDynamic** EliminationVolumeMID);
	void GetTriggerLocation(struct FVector* Location);
	void VFXParameters(TArray<struct FParticleSysParam>* Array);
	void UpdateMinigameVisuals();
	void WasActivatedByOverlappingActor(bool* bActivated);
	void BindOnExitVehicleForAffectPawn(class AFortPlayerPawnAthena* AffectedPawn);
	void OnAffectedPlayerExitedVehicle();
	void OnRep_bEnabled();
	struct FGameplayCueParameters EmptyCueParameters();
	void Update_Volume_State();
	void Minigame_State_Logic(EFortMinigameState State);
	void Transmit_if_Valid_Actor(class UFortGameplayTriggerMessageComponent* Transmitter, const class AActor* Actor, bool Enter, bool* Valid);
	void UpdateVisuals();
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Device_Volume_Floor_C">();
	}
	static class ADevice_Volume_Floor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADevice_Volume_Floor_C>();
	}
};
static_assert(alignof(ADevice_Volume_Floor_C) == 0x000008, "Wrong alignment on ADevice_Volume_Floor_C");
static_assert(sizeof(ADevice_Volume_Floor_C) == 0x000D48, "Wrong size on ADevice_Volume_Floor_C");
static_assert(offsetof(ADevice_Volume_Floor_C, UberGraphFrame_Device_Volume_Floor_C) == 0x000C98, "Member 'ADevice_Volume_Floor_C::UberGraphFrame_Device_Volume_Floor_C' has a wrong offset!");
static_assert(offsetof(ADevice_Volume_Floor_C, DisableWhenReceived) == 0x000CA0, "Member 'ADevice_Volume_Floor_C::DisableWhenReceived' has a wrong offset!");
static_assert(offsetof(ADevice_Volume_Floor_C, EnableWhenReceived) == 0x000CA8, "Member 'ADevice_Volume_Floor_C::EnableWhenReceived' has a wrong offset!");
static_assert(offsetof(ADevice_Volume_Floor_C, PointLight) == 0x000CB0, "Member 'ADevice_Volume_Floor_C::PointLight' has a wrong offset!");
static_assert(offsetof(ADevice_Volume_Floor_C, LightRays) == 0x000CB8, "Member 'ADevice_Volume_Floor_C::LightRays' has a wrong offset!");
static_assert(offsetof(ADevice_Volume_Floor_C, Frame) == 0x000CC0, "Member 'ADevice_Volume_Floor_C::Frame' has a wrong offset!");
static_assert(offsetof(ADevice_Volume_Floor_C, Trigger) == 0x000CC8, "Member 'ADevice_Volume_Floor_C::Trigger' has a wrong offset!");
static_assert(offsetof(ADevice_Volume_Floor_C, Scene) == 0x000CD0, "Member 'ADevice_Volume_Floor_C::Scene' has a wrong offset!");
static_assert(offsetof(ADevice_Volume_Floor_C, ZoneVisibleInGame) == 0x000CD8, "Member 'ADevice_Volume_Floor_C::ZoneVisibleInGame' has a wrong offset!");
static_assert(offsetof(ADevice_Volume_Floor_C, ZoneZScale) == 0x000CDC, "Member 'ADevice_Volume_Floor_C::ZoneZScale' has a wrong offset!");
static_assert(offsetof(ADevice_Volume_Floor_C, ZoneXScale) == 0x000CE0, "Member 'ADevice_Volume_Floor_C::ZoneXScale' has a wrong offset!");
static_assert(offsetof(ADevice_Volume_Floor_C, ZoneYScale) == 0x000CE4, "Member 'ADevice_Volume_Floor_C::ZoneYScale' has a wrong offset!");
static_assert(offsetof(ADevice_Volume_Floor_C, TrapFireSound) == 0x000CE8, "Member 'ADevice_Volume_Floor_C::TrapFireSound' has a wrong offset!");
static_assert(offsetof(ADevice_Volume_Floor_C, VolumeMID) == 0x000CF0, "Member 'ADevice_Volume_Floor_C::VolumeMID' has a wrong offset!");
static_assert(offsetof(ADevice_Volume_Floor_C, ZoneEdgesSize) == 0x000CF8, "Member 'ADevice_Volume_Floor_C::ZoneEdgesSize' has a wrong offset!");
static_assert(offsetof(ADevice_Volume_Floor_C, BlocksVolumeHigh) == 0x000D04, "Member 'ADevice_Volume_Floor_C::BlocksVolumeHigh' has a wrong offset!");
static_assert(offsetof(ADevice_Volume_Floor_C, BlocksVolumeLow) == 0x000D10, "Member 'ADevice_Volume_Floor_C::BlocksVolumeLow' has a wrong offset!");
static_assert(offsetof(ADevice_Volume_Floor_C, TriggerLocationDotProduct) == 0x000D1C, "Member 'ADevice_Volume_Floor_C::TriggerLocationDotProduct' has a wrong offset!");
static_assert(offsetof(ADevice_Volume_Floor_C, ZoneProtectedTeam) == 0x000D28, "Member 'ADevice_Volume_Floor_C::ZoneProtectedTeam' has a wrong offset!");
static_assert(offsetof(ADevice_Volume_Floor_C, BaseMeshVisibleInGame) == 0x000D2C, "Member 'ADevice_Volume_Floor_C::BaseMeshVisibleInGame' has a wrong offset!");
static_assert(offsetof(ADevice_Volume_Floor_C, AffectedPlayersInVehicles) == 0x000D30, "Member 'ADevice_Volume_Floor_C::AffectedPlayersInVehicles' has a wrong offset!");
static_assert(offsetof(ADevice_Volume_Floor_C, bDamageEmptyVehicles) == 0x000D40, "Member 'ADevice_Volume_Floor_C::bDamageEmptyVehicles' has a wrong offset!");
static_assert(offsetof(ADevice_Volume_Floor_C, bDamagePlayers) == 0x000D41, "Member 'ADevice_Volume_Floor_C::bDamagePlayers' has a wrong offset!");
static_assert(offsetof(ADevice_Volume_Floor_C, bDamageVehicles) == 0x000D42, "Member 'ADevice_Volume_Floor_C::bDamageVehicles' has a wrong offset!");
static_assert(offsetof(ADevice_Volume_Floor_C, bDamageCreatures) == 0x000D43, "Member 'ADevice_Volume_Floor_C::bDamageCreatures' has a wrong offset!");
static_assert(offsetof(ADevice_Volume_Floor_C, EnabledOnStart) == 0x000D44, "Member 'ADevice_Volume_Floor_C::EnabledOnStart' has a wrong offset!");
static_assert(offsetof(ADevice_Volume_Floor_C, bEnabled) == 0x000D45, "Member 'ADevice_Volume_Floor_C::bEnabled' has a wrong offset!");

}

