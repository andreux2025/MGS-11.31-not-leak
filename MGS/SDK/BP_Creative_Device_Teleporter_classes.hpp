#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Creative_Device_Teleporter

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Creative_Device_Teleporter.BP_Creative_Device_Teleporter_C
// 0x0238 (0x0D58 - 0x0B20)
class ABP_Creative_Device_Teleporter_C final : public AFortCreativeTeleporter
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0B20(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        Portal_InWorld_Loop_Cue;                           // 0x0B28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCreative_Enabled_Component_C*          EnabledComponent;                                  // 0x0B30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_EnergyComponent_C*                  EnergyComponent;                                   // 0x0B38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       HoverOverSphere;                                   // 0x0B40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortMinigameLogicComponent*            FortMinigameLogic;                                 // 0x0B48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UToyOptionsComponent_C*                 ToyOptionsComponent;                               // 0x0B50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortGameplayTriggerMessageComponent*   TriggerOnTeleportedTo;                             // 0x0B58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortGameplayTriggerMessageComponent*   TriggerOnEntered;                                  // 0x0B60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortGameplayReceiverMessageComponent*  DisableWhenReceived;                               // 0x0B68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_Rift_ClosingUp;                                  // 0x0B70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_Rift_Idle_Loop;                                  // 0x0B78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      OverlapCapsule;                                    // 0x0B80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortGameplayReceiverMessageComponent*  EnableWhenReceived;                                // 0x0B88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         TPDisabledFXTimeline_Linear_33082A284455666A90E47AAB1A6DF1B0; // 0x0B90(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TPDisabledFXTimeline__Direction_33082A284455666A90E47AAB1A6DF1B0; // 0x0B94(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B95[0x3];                                      // 0x0B95(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TPDisabledFXTimeline;                              // 0x0B98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TPEnabledFXTimeline_Linear_D89DE44C465390DD74946C89C54154CE; // 0x0BA0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TPEnabledFXTimeline__Direction_D89DE44C465390DD74946C89C54154CE; // 0x0BA4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BA5[0x3];                                      // 0x0BA5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TPEnabledFXTimeline;                               // 0x0BA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TPEffectsTimeLine_Linear_4D8B0BEF43A49EF50570AF98BE017A79; // 0x0BB0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TPEffectsTimeLine__Direction_4D8B0BEF43A49EF50570AF98BE017A79; // 0x0BB4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BB5[0x3];                                      // 0x0BB5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TPEffectsTimeLine;                                 // 0x0BB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Knob_TeleporterName;                               // 0x0BC0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	float                                         Knob_TeleporterEnergyCapacity;                     // 0x0BD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Knob_bShowNameOnEntrance;                          // 0x0BD4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BD5[0x3];                                      // 0x0BD5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Knob_EnergyCostPerUse;                             // 0x0BD8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Knob_RechargeRatePerSecond;                        // 0x0BDC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Knob_DelayBeforeRecharge;                          // 0x0BE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Knob_ChargeToEnable;                               // 0x0BE4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Knob_ChangeTarget;                                 // 0x0BE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BEC[0x4];                                      // 0x0BEC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        EnterRiftPS;                                       // 0x0BF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             EnteredRiftSound;                                  // 0x0BF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortCreativeTeleporterGroup                  LastChannel;                                       // 0x0C00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C01[0x3];                                      // 0x0C01(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TeleporterUseCounter;                              // 0x0C04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Knob_bSFXEnabled;                                  // 0x0C08(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                          Knob_bVFXEnabled;                                  // 0x0C09(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                          Knob_bTeleporterVisible;                           // 0x0C0A(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                          bAllowVehciles;                                    // 0x0C0B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Knob_bConserveMomentum;                            // 0x0C0C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C0D[0x3];                                      // 0x0C0D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Knob_AllowedTeamIdx;                               // 0x0C10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C14[0x4];                                      // 0x0C14(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Creative_Device_Teleporter_C*       DestinationTeleporter;                             // 0x0C18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        PawnToTeleport;                                    // 0x0C20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  TeleporterBlockingTags;                            // 0x0C28(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UMaterialInstanceDynamic*               RiftMID;                                           // 0x0C48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DesiredEnergyLevel;                                // 0x0C50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PreviousEnergyLevel;                               // 0x0C54(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TeleporterLowEnergyColor;                          // 0x0C58(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TeleporterMaxEnergyColor;                          // 0x0C68(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               SharpFlareMID;                                     // 0x0C78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               RoundFlareMID;                                     // 0x0C80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CoronaMID;                                         // 0x0C88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayAttribute                     CurrentEnergyAttribute;                            // 0x0C90(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FGameplayAttribute                     EnergyCapacityAttribute;                           // 0x0CB0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FGameplayAttribute                     EnergyCostAttribute;                               // 0x0CD0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FVector                                FragmentMaskVector;                                // 0x0CF0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bChargeGainShown;                                  // 0x0CFC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CFD[0x3];                                      // 0x0CFD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NewEnergyLevel;                                    // 0x0D00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentEnergyCapacity;                             // 0x0D04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentEnergyCost;                                 // 0x0D08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           NewTeleporterEnergyColor;                          // 0x0D0C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Knob_EnabledIndex;                                 // 0x0D1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         TeleporterEventFlash;                              // 0x0D20(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	EFortCreativeTeleporterEvent                  TeleporterEventType;                               // 0x0D21(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D22[0x6];                                      // 0x0D22(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TeleportEventResetTimer;                           // 0x0D28(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentTimeSelectedTargetIndex;                    // 0x0D30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D34[0x4];                                      // 0x0D34(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Creative_Device_Teleporter_C*       CurrentTimeSelectedTarget;                         // 0x0D38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RiftCenterBrightnessScalar;                        // 0x0D40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RiftEdgeBrightnessScalar;                          // 0x0D44(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Knob_bFacePlayerInDirectionOfTeleporter;           // 0x0D48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4C[0x4];                                      // 0x0D4C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        ExitRiftPS;                                        // 0x0D50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Creative_Device_Teleporter(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void BndEvt__TeleportToWhenReceived_K2Node_ComponentBoundEvent_7_OnGameplayMessageReceived__DelegateSignature(class AController* TriggerInstigator);
	void BndEvt__FortMinigameLogic_K2Node_ComponentBoundEvent_13_OnMinigameAssignmentChanged__DelegateSignature(class AFortMinigame* Minigame);
	void BndEvt__EnabledComponent_K2Node_ComponentBoundEvent_12_On_Enabled_State_Changed__DelegateSignature(bool Enabled);
	void BndEvt__EnergyComponent_K2Node_ComponentBoundEvent_11_EnergyLevelsUpdated__DelegateSignature();
	void ReceiveBeginPlay();
	void BndEvt__FortMinigameLogic_K2Node_ComponentBoundEvent_6_OnMinigameStateChanged__DelegateSignature(class AFortMinigame* Minigame, EFortMinigameState NewMinigameState);
	void UpdateRiftVisibility();
	void BndEvt__FortMinigameLogic_K2Node_ComponentBoundEvent_9_SimpleDynamicMulticastDelegate__DelegateSignature();
	void BndEvt__FortMinigameLogic_K2Node_ComponentBoundEvent_8_SimpleDynamicMulticastDelegate__DelegateSignature();
	void PlayTeleportEnteredFX(const struct FVector& Location);
	void BndEvt__ToyOptionsComponent_K2Node_ComponentBoundEvent_5_AnyPropertyChangedDelegate__DelegateSignature();
	void BndEvt__RechargeWhenReceived_K2Node_ComponentBoundEvent_4_OnGameplayMessageReceived__DelegateSignature(class AController* TriggerInstigator);
	void BndEvt__DrainEnergyWhenReceived_K2Node_ComponentBoundEvent_1_OnGameplayMessageReceived__DelegateSignature(class AController* TriggerInstigator);
	void BndEvt__OverlapCapsule_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__DisableWhenReceived_K2Node_ComponentBoundEvent_1_OnGameplayMessageReceived__DelegateSignature(class AController* TriggerInstigator);
	void BndEvt__EnableWhenReceived_K2Node_ComponentBoundEvent_0_OnGameplayMessageReceived__DelegateSignature(class AController* TriggerInstigator);
	void PlayTeleportExitedFX(const struct FVector& Location);
	void PortalDisabledFX();
	void PortalEnabledFX();
	void UpdateTeleporterFX();
	void TPDisabledFXTimeline__UpdateFunc();
	void TPDisabledFXTimeline__FinishedFunc();
	void TPEnabledFXTimeline__UpdateFunc();
	void TPEnabledFXTimeline__FinishedFunc();
	void TPEffectsTimeLine__UpdateFunc();
	void TPEffectsTimeLine__FinishedFunc();
	void CanTeleportActor(class AFortPawn* PawnToTeleport_0, bool* bCanTeleportActor);
	void GetTeleporterManager(class UFortCreativeTeleporterManagerComponent** TeleporterManagerComponent);
	void TeleportPlayerPawnTo(class AFortPlayerPawn* PawnToTeleport_0, class ABP_Creative_Device_Teleporter_C* TargetTeleporter);
	void isMinigameInProgress(bool* bInProgress);
	void SelectDestinationTeleporter(class AFortPlayerPawn* PawnToTeleport_0, class ABP_Creative_Device_Teleporter_C** SelectedTeleporter);
	void UpdateEnergyAttributes();
	void InitializeFX();
	void isMinigameInCreationMode(bool* bInCreationMode);
	void OnReceivedPawn(class AFortPlayerPawn* PawnReceived);
	void OnRep_TeleporterUsedFlash();
	void ResetTeleportEventState();
	void GetTeleportedPawnYaw(class AFortPlayerPawn* PawnToTeleport_0, class ABP_Creative_Device_Teleporter_C* SourceTeleporter, float* OutYaw);
	void GetTeleportedPawnPitch(class AFortPlayerPawn* PawnToTeleport_0, class ABP_Creative_Device_Teleporter_C* SourceTeleporter, float* OutPitch);

	bool BlueprintCanInteract(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Creative_Device_Teleporter_C">();
	}
	static class ABP_Creative_Device_Teleporter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Creative_Device_Teleporter_C>();
	}
};
static_assert(alignof(ABP_Creative_Device_Teleporter_C) == 0x000008, "Wrong alignment on ABP_Creative_Device_Teleporter_C");
static_assert(sizeof(ABP_Creative_Device_Teleporter_C) == 0x000D58, "Wrong size on ABP_Creative_Device_Teleporter_C");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, UberGraphFrame) == 0x000B20, "Member 'ABP_Creative_Device_Teleporter_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, Portal_InWorld_Loop_Cue) == 0x000B28, "Member 'ABP_Creative_Device_Teleporter_C::Portal_InWorld_Loop_Cue' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, EnabledComponent) == 0x000B30, "Member 'ABP_Creative_Device_Teleporter_C::EnabledComponent' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, EnergyComponent) == 0x000B38, "Member 'ABP_Creative_Device_Teleporter_C::EnergyComponent' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, HoverOverSphere) == 0x000B40, "Member 'ABP_Creative_Device_Teleporter_C::HoverOverSphere' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, FortMinigameLogic) == 0x000B48, "Member 'ABP_Creative_Device_Teleporter_C::FortMinigameLogic' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, ToyOptionsComponent) == 0x000B50, "Member 'ABP_Creative_Device_Teleporter_C::ToyOptionsComponent' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, TriggerOnTeleportedTo) == 0x000B58, "Member 'ABP_Creative_Device_Teleporter_C::TriggerOnTeleportedTo' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, TriggerOnEntered) == 0x000B60, "Member 'ABP_Creative_Device_Teleporter_C::TriggerOnEntered' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, DisableWhenReceived) == 0x000B68, "Member 'ABP_Creative_Device_Teleporter_C::DisableWhenReceived' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, P_Rift_ClosingUp) == 0x000B70, "Member 'ABP_Creative_Device_Teleporter_C::P_Rift_ClosingUp' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, P_Rift_Idle_Loop) == 0x000B78, "Member 'ABP_Creative_Device_Teleporter_C::P_Rift_Idle_Loop' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, OverlapCapsule) == 0x000B80, "Member 'ABP_Creative_Device_Teleporter_C::OverlapCapsule' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, EnableWhenReceived) == 0x000B88, "Member 'ABP_Creative_Device_Teleporter_C::EnableWhenReceived' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, TPDisabledFXTimeline_Linear_33082A284455666A90E47AAB1A6DF1B0) == 0x000B90, "Member 'ABP_Creative_Device_Teleporter_C::TPDisabledFXTimeline_Linear_33082A284455666A90E47AAB1A6DF1B0' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, TPDisabledFXTimeline__Direction_33082A284455666A90E47AAB1A6DF1B0) == 0x000B94, "Member 'ABP_Creative_Device_Teleporter_C::TPDisabledFXTimeline__Direction_33082A284455666A90E47AAB1A6DF1B0' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, TPDisabledFXTimeline) == 0x000B98, "Member 'ABP_Creative_Device_Teleporter_C::TPDisabledFXTimeline' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, TPEnabledFXTimeline_Linear_D89DE44C465390DD74946C89C54154CE) == 0x000BA0, "Member 'ABP_Creative_Device_Teleporter_C::TPEnabledFXTimeline_Linear_D89DE44C465390DD74946C89C54154CE' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, TPEnabledFXTimeline__Direction_D89DE44C465390DD74946C89C54154CE) == 0x000BA4, "Member 'ABP_Creative_Device_Teleporter_C::TPEnabledFXTimeline__Direction_D89DE44C465390DD74946C89C54154CE' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, TPEnabledFXTimeline) == 0x000BA8, "Member 'ABP_Creative_Device_Teleporter_C::TPEnabledFXTimeline' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, TPEffectsTimeLine_Linear_4D8B0BEF43A49EF50570AF98BE017A79) == 0x000BB0, "Member 'ABP_Creative_Device_Teleporter_C::TPEffectsTimeLine_Linear_4D8B0BEF43A49EF50570AF98BE017A79' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, TPEffectsTimeLine__Direction_4D8B0BEF43A49EF50570AF98BE017A79) == 0x000BB4, "Member 'ABP_Creative_Device_Teleporter_C::TPEffectsTimeLine__Direction_4D8B0BEF43A49EF50570AF98BE017A79' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, TPEffectsTimeLine) == 0x000BB8, "Member 'ABP_Creative_Device_Teleporter_C::TPEffectsTimeLine' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, Knob_TeleporterName) == 0x000BC0, "Member 'ABP_Creative_Device_Teleporter_C::Knob_TeleporterName' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, Knob_TeleporterEnergyCapacity) == 0x000BD0, "Member 'ABP_Creative_Device_Teleporter_C::Knob_TeleporterEnergyCapacity' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, Knob_bShowNameOnEntrance) == 0x000BD4, "Member 'ABP_Creative_Device_Teleporter_C::Knob_bShowNameOnEntrance' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, Knob_EnergyCostPerUse) == 0x000BD8, "Member 'ABP_Creative_Device_Teleporter_C::Knob_EnergyCostPerUse' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, Knob_RechargeRatePerSecond) == 0x000BDC, "Member 'ABP_Creative_Device_Teleporter_C::Knob_RechargeRatePerSecond' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, Knob_DelayBeforeRecharge) == 0x000BE0, "Member 'ABP_Creative_Device_Teleporter_C::Knob_DelayBeforeRecharge' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, Knob_ChargeToEnable) == 0x000BE4, "Member 'ABP_Creative_Device_Teleporter_C::Knob_ChargeToEnable' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, Knob_ChangeTarget) == 0x000BE8, "Member 'ABP_Creative_Device_Teleporter_C::Knob_ChangeTarget' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, EnterRiftPS) == 0x000BF0, "Member 'ABP_Creative_Device_Teleporter_C::EnterRiftPS' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, EnteredRiftSound) == 0x000BF8, "Member 'ABP_Creative_Device_Teleporter_C::EnteredRiftSound' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, LastChannel) == 0x000C00, "Member 'ABP_Creative_Device_Teleporter_C::LastChannel' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, TeleporterUseCounter) == 0x000C04, "Member 'ABP_Creative_Device_Teleporter_C::TeleporterUseCounter' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, Knob_bSFXEnabled) == 0x000C08, "Member 'ABP_Creative_Device_Teleporter_C::Knob_bSFXEnabled' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, Knob_bVFXEnabled) == 0x000C09, "Member 'ABP_Creative_Device_Teleporter_C::Knob_bVFXEnabled' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, Knob_bTeleporterVisible) == 0x000C0A, "Member 'ABP_Creative_Device_Teleporter_C::Knob_bTeleporterVisible' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, bAllowVehciles) == 0x000C0B, "Member 'ABP_Creative_Device_Teleporter_C::bAllowVehciles' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, Knob_bConserveMomentum) == 0x000C0C, "Member 'ABP_Creative_Device_Teleporter_C::Knob_bConserveMomentum' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, Knob_AllowedTeamIdx) == 0x000C10, "Member 'ABP_Creative_Device_Teleporter_C::Knob_AllowedTeamIdx' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, DestinationTeleporter) == 0x000C18, "Member 'ABP_Creative_Device_Teleporter_C::DestinationTeleporter' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, PawnToTeleport) == 0x000C20, "Member 'ABP_Creative_Device_Teleporter_C::PawnToTeleport' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, TeleporterBlockingTags) == 0x000C28, "Member 'ABP_Creative_Device_Teleporter_C::TeleporterBlockingTags' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, RiftMID) == 0x000C48, "Member 'ABP_Creative_Device_Teleporter_C::RiftMID' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, DesiredEnergyLevel) == 0x000C50, "Member 'ABP_Creative_Device_Teleporter_C::DesiredEnergyLevel' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, PreviousEnergyLevel) == 0x000C54, "Member 'ABP_Creative_Device_Teleporter_C::PreviousEnergyLevel' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, TeleporterLowEnergyColor) == 0x000C58, "Member 'ABP_Creative_Device_Teleporter_C::TeleporterLowEnergyColor' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, TeleporterMaxEnergyColor) == 0x000C68, "Member 'ABP_Creative_Device_Teleporter_C::TeleporterMaxEnergyColor' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, SharpFlareMID) == 0x000C78, "Member 'ABP_Creative_Device_Teleporter_C::SharpFlareMID' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, RoundFlareMID) == 0x000C80, "Member 'ABP_Creative_Device_Teleporter_C::RoundFlareMID' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, CoronaMID) == 0x000C88, "Member 'ABP_Creative_Device_Teleporter_C::CoronaMID' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, CurrentEnergyAttribute) == 0x000C90, "Member 'ABP_Creative_Device_Teleporter_C::CurrentEnergyAttribute' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, EnergyCapacityAttribute) == 0x000CB0, "Member 'ABP_Creative_Device_Teleporter_C::EnergyCapacityAttribute' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, EnergyCostAttribute) == 0x000CD0, "Member 'ABP_Creative_Device_Teleporter_C::EnergyCostAttribute' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, FragmentMaskVector) == 0x000CF0, "Member 'ABP_Creative_Device_Teleporter_C::FragmentMaskVector' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, bChargeGainShown) == 0x000CFC, "Member 'ABP_Creative_Device_Teleporter_C::bChargeGainShown' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, NewEnergyLevel) == 0x000D00, "Member 'ABP_Creative_Device_Teleporter_C::NewEnergyLevel' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, CurrentEnergyCapacity) == 0x000D04, "Member 'ABP_Creative_Device_Teleporter_C::CurrentEnergyCapacity' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, CurrentEnergyCost) == 0x000D08, "Member 'ABP_Creative_Device_Teleporter_C::CurrentEnergyCost' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, NewTeleporterEnergyColor) == 0x000D0C, "Member 'ABP_Creative_Device_Teleporter_C::NewTeleporterEnergyColor' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, Knob_EnabledIndex) == 0x000D1C, "Member 'ABP_Creative_Device_Teleporter_C::Knob_EnabledIndex' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, TeleporterEventFlash) == 0x000D20, "Member 'ABP_Creative_Device_Teleporter_C::TeleporterEventFlash' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, TeleporterEventType) == 0x000D21, "Member 'ABP_Creative_Device_Teleporter_C::TeleporterEventType' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, TeleportEventResetTimer) == 0x000D28, "Member 'ABP_Creative_Device_Teleporter_C::TeleportEventResetTimer' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, CurrentTimeSelectedTargetIndex) == 0x000D30, "Member 'ABP_Creative_Device_Teleporter_C::CurrentTimeSelectedTargetIndex' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, CurrentTimeSelectedTarget) == 0x000D38, "Member 'ABP_Creative_Device_Teleporter_C::CurrentTimeSelectedTarget' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, RiftCenterBrightnessScalar) == 0x000D40, "Member 'ABP_Creative_Device_Teleporter_C::RiftCenterBrightnessScalar' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, RiftEdgeBrightnessScalar) == 0x000D44, "Member 'ABP_Creative_Device_Teleporter_C::RiftEdgeBrightnessScalar' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, Knob_bFacePlayerInDirectionOfTeleporter) == 0x000D48, "Member 'ABP_Creative_Device_Teleporter_C::Knob_bFacePlayerInDirectionOfTeleporter' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Device_Teleporter_C, ExitRiftPS) == 0x000D50, "Member 'ABP_Creative_Device_Teleporter_C::ExitRiftPS' has a wrong offset!");

}

