#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BattlePassScreen

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "FortniteUI_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK::Params
{

// Function BattlePassScreen.BattlePassScreen_C.RevealRightSideActions
// 0x0008 (0x0008 - 0x0000)
struct BattlePassScreen_C_RevealRightSideActions final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattlePassScreen_C_RevealRightSideActions) == 0x000008, "Wrong alignment on BattlePassScreen_C_RevealRightSideActions");
static_assert(sizeof(BattlePassScreen_C_RevealRightSideActions) == 0x000008, "Wrong size on BattlePassScreen_C_RevealRightSideActions");
static_assert(offsetof(BattlePassScreen_C_RevealRightSideActions, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BattlePassScreen_C_RevealRightSideActions::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BattlePassScreen.BattlePassScreen_C.HideRightSideActions
// 0x0008 (0x0008 - 0x0000)
struct BattlePassScreen_C_HideRightSideActions final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattlePassScreen_C_HideRightSideActions) == 0x000008, "Wrong alignment on BattlePassScreen_C_HideRightSideActions");
static_assert(sizeof(BattlePassScreen_C_HideRightSideActions) == 0x000008, "Wrong size on BattlePassScreen_C_HideRightSideActions");
static_assert(offsetof(BattlePassScreen_C_HideRightSideActions, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BattlePassScreen_C_HideRightSideActions::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BattlePassScreen.BattlePassScreen_C.HandleShowVariantCycleLabel
// 0x0018 (0x0018 - 0x0000)
struct BattlePassScreen_C_HandleShowVariantCycleLabel final
{
public:
	bool                                          bShowCycleLabel;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattlePassScreen_C_HandleShowVariantCycleLabel) == 0x000008, "Wrong alignment on BattlePassScreen_C_HandleShowVariantCycleLabel");
static_assert(sizeof(BattlePassScreen_C_HandleShowVariantCycleLabel) == 0x000018, "Wrong size on BattlePassScreen_C_HandleShowVariantCycleLabel");
static_assert(offsetof(BattlePassScreen_C_HandleShowVariantCycleLabel, bShowCycleLabel) == 0x000000, "Member 'BattlePassScreen_C_HandleShowVariantCycleLabel::bShowCycleLabel' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleShowVariantCycleLabel, CallFunc_PlayAnimationReverse_ReturnValue) == 0x000008, "Member 'BattlePassScreen_C_HandleShowVariantCycleLabel::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleShowVariantCycleLabel, CallFunc_PlayAnimationForward_ReturnValue) == 0x000010, "Member 'BattlePassScreen_C_HandleShowVariantCycleLabel::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");

// Function BattlePassScreen.BattlePassScreen_C.HandleOffscreenIndicatorAnimations
// 0x0038 (0x0038 - 0x0000)
struct BattlePassScreen_C_HandleOffscreenIndicatorAnimations final
{
public:
	int32                                         LeftFriendCount;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RightFriendCount;                                  // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              CallFunc_GetVisibility_ReturnValue;                // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              CallFunc_GetVisibility_ReturnValue_1;              // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_27[0x1];                                       // 0x0027(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue_1;       // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue_1;       // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattlePassScreen_C_HandleOffscreenIndicatorAnimations) == 0x000008, "Wrong alignment on BattlePassScreen_C_HandleOffscreenIndicatorAnimations");
static_assert(sizeof(BattlePassScreen_C_HandleOffscreenIndicatorAnimations) == 0x000038, "Wrong size on BattlePassScreen_C_HandleOffscreenIndicatorAnimations");
static_assert(offsetof(BattlePassScreen_C_HandleOffscreenIndicatorAnimations, LeftFriendCount) == 0x000000, "Member 'BattlePassScreen_C_HandleOffscreenIndicatorAnimations::LeftFriendCount' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleOffscreenIndicatorAnimations, RightFriendCount) == 0x000004, "Member 'BattlePassScreen_C_HandleOffscreenIndicatorAnimations::RightFriendCount' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleOffscreenIndicatorAnimations, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000008, "Member 'BattlePassScreen_C_HandleOffscreenIndicatorAnimations::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleOffscreenIndicatorAnimations, CallFunc_PlayAnimationReverse_ReturnValue) == 0x000010, "Member 'BattlePassScreen_C_HandleOffscreenIndicatorAnimations::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleOffscreenIndicatorAnimations, CallFunc_PlayAnimationForward_ReturnValue) == 0x000018, "Member 'BattlePassScreen_C_HandleOffscreenIndicatorAnimations::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleOffscreenIndicatorAnimations, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000020, "Member 'BattlePassScreen_C_HandleOffscreenIndicatorAnimations::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleOffscreenIndicatorAnimations, CallFunc_GetVisibility_ReturnValue) == 0x000021, "Member 'BattlePassScreen_C_HandleOffscreenIndicatorAnimations::CallFunc_GetVisibility_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleOffscreenIndicatorAnimations, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000022, "Member 'BattlePassScreen_C_HandleOffscreenIndicatorAnimations::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleOffscreenIndicatorAnimations, CallFunc_GetVisibility_ReturnValue_1) == 0x000023, "Member 'BattlePassScreen_C_HandleOffscreenIndicatorAnimations::CallFunc_GetVisibility_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleOffscreenIndicatorAnimations, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000024, "Member 'BattlePassScreen_C_HandleOffscreenIndicatorAnimations::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleOffscreenIndicatorAnimations, CallFunc_BooleanAND_ReturnValue) == 0x000025, "Member 'BattlePassScreen_C_HandleOffscreenIndicatorAnimations::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleOffscreenIndicatorAnimations, CallFunc_BooleanAND_ReturnValue_1) == 0x000026, "Member 'BattlePassScreen_C_HandleOffscreenIndicatorAnimations::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleOffscreenIndicatorAnimations, CallFunc_PlayAnimationReverse_ReturnValue_1) == 0x000028, "Member 'BattlePassScreen_C_HandleOffscreenIndicatorAnimations::CallFunc_PlayAnimationReverse_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleOffscreenIndicatorAnimations, CallFunc_PlayAnimationForward_ReturnValue_1) == 0x000030, "Member 'BattlePassScreen_C_HandleOffscreenIndicatorAnimations::CallFunc_PlayAnimationForward_ReturnValue_1' has a wrong offset!");

// Function BattlePassScreen.BattlePassScreen_C.HandleRewardTimelineAnimation
// 0x0040 (0x0040 - 0x0000)
struct BattlePassScreen_C_HandleRewardTimelineAnimation final
{
public:
	bool                                          bAnimateRewardTimeline_0;                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EUMGSequencePlayMode                          Temp_byte_Variable;                                // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          Temp_byte_Variable_1;                              // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          K2Node_Select_Default;                             // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              CallFunc_GetVisibility_ReturnValue;                // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_1;                           // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattlePassScreen_C_HandleRewardTimelineAnimation) == 0x000008, "Wrong alignment on BattlePassScreen_C_HandleRewardTimelineAnimation");
static_assert(sizeof(BattlePassScreen_C_HandleRewardTimelineAnimation) == 0x000040, "Wrong size on BattlePassScreen_C_HandleRewardTimelineAnimation");
static_assert(offsetof(BattlePassScreen_C_HandleRewardTimelineAnimation, bAnimateRewardTimeline_0) == 0x000000, "Member 'BattlePassScreen_C_HandleRewardTimelineAnimation::bAnimateRewardTimeline_0' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleRewardTimelineAnimation, Temp_float_Variable) == 0x000004, "Member 'BattlePassScreen_C_HandleRewardTimelineAnimation::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleRewardTimelineAnimation, Temp_float_Variable_1) == 0x000008, "Member 'BattlePassScreen_C_HandleRewardTimelineAnimation::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleRewardTimelineAnimation, Temp_bool_Variable) == 0x00000C, "Member 'BattlePassScreen_C_HandleRewardTimelineAnimation::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleRewardTimelineAnimation, Temp_byte_Variable) == 0x00000D, "Member 'BattlePassScreen_C_HandleRewardTimelineAnimation::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleRewardTimelineAnimation, Temp_byte_Variable_1) == 0x00000E, "Member 'BattlePassScreen_C_HandleRewardTimelineAnimation::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleRewardTimelineAnimation, K2Node_Select_Default) == 0x00000F, "Member 'BattlePassScreen_C_HandleRewardTimelineAnimation::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleRewardTimelineAnimation, CallFunc_PlayAnimationReverse_ReturnValue) == 0x000010, "Member 'BattlePassScreen_C_HandleRewardTimelineAnimation::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleRewardTimelineAnimation, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000018, "Member 'BattlePassScreen_C_HandleRewardTimelineAnimation::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleRewardTimelineAnimation, CallFunc_PlayAnimationForward_ReturnValue) == 0x000020, "Member 'BattlePassScreen_C_HandleRewardTimelineAnimation::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleRewardTimelineAnimation, Temp_bool_Variable_1) == 0x000028, "Member 'BattlePassScreen_C_HandleRewardTimelineAnimation::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleRewardTimelineAnimation, CallFunc_GetVisibility_ReturnValue) == 0x000029, "Member 'BattlePassScreen_C_HandleRewardTimelineAnimation::CallFunc_GetVisibility_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleRewardTimelineAnimation, K2Node_Select_Default_1) == 0x00002C, "Member 'BattlePassScreen_C_HandleRewardTimelineAnimation::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleRewardTimelineAnimation, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000030, "Member 'BattlePassScreen_C_HandleRewardTimelineAnimation::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleRewardTimelineAnimation, CallFunc_BooleanAND_ReturnValue) == 0x000031, "Member 'BattlePassScreen_C_HandleRewardTimelineAnimation::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleRewardTimelineAnimation, CallFunc_PlayAnimation_ReturnValue) == 0x000038, "Member 'BattlePassScreen_C_HandleRewardTimelineAnimation::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BattlePassScreen.BattlePassScreen_C.HandleWatchVideoRequest
// 0x0038 (0x0038 - 0x0000)
struct BattlePassScreen_C_HandleWatchVideoRequest final
{
public:
	bool                                          PlayFromDisc;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortRuntimeOptions*                    CallFunc_GetRuntimeOptions_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UseElectraForWatchBattlePassMovie_ReturnValue; // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UActivatableMovieWidget_Monolithic_C*   CallFunc_Create_ReturnValue;                       // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LoadStreamingVideo_NoAutoPlay;            // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortStreamMediaSource*                 CallFunc_LoadStreamingVideo_MediaSource;           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattlePassScreen_C_HandleWatchVideoRequest) == 0x000008, "Wrong alignment on BattlePassScreen_C_HandleWatchVideoRequest");
static_assert(sizeof(BattlePassScreen_C_HandleWatchVideoRequest) == 0x000038, "Wrong size on BattlePassScreen_C_HandleWatchVideoRequest");
static_assert(offsetof(BattlePassScreen_C_HandleWatchVideoRequest, PlayFromDisc) == 0x000000, "Member 'BattlePassScreen_C_HandleWatchVideoRequest::PlayFromDisc' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleWatchVideoRequest, CallFunc_GetRuntimeOptions_ReturnValue) == 0x000008, "Member 'BattlePassScreen_C_HandleWatchVideoRequest::CallFunc_GetRuntimeOptions_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleWatchVideoRequest, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'BattlePassScreen_C_HandleWatchVideoRequest::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleWatchVideoRequest, CallFunc_UseElectraForWatchBattlePassMovie_ReturnValue) == 0x000011, "Member 'BattlePassScreen_C_HandleWatchVideoRequest::CallFunc_UseElectraForWatchBattlePassMovie_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleWatchVideoRequest, CallFunc_BooleanAND_ReturnValue) == 0x000012, "Member 'BattlePassScreen_C_HandleWatchVideoRequest::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleWatchVideoRequest, CallFunc_GetOwningPlayer_ReturnValue) == 0x000018, "Member 'BattlePassScreen_C_HandleWatchVideoRequest::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleWatchVideoRequest, CallFunc_Create_ReturnValue) == 0x000020, "Member 'BattlePassScreen_C_HandleWatchVideoRequest::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleWatchVideoRequest, CallFunc_LoadStreamingVideo_NoAutoPlay) == 0x000028, "Member 'BattlePassScreen_C_HandleWatchVideoRequest::CallFunc_LoadStreamingVideo_NoAutoPlay' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleWatchVideoRequest, CallFunc_LoadStreamingVideo_MediaSource) == 0x000030, "Member 'BattlePassScreen_C_HandleWatchVideoRequest::CallFunc_LoadStreamingVideo_MediaSource' has a wrong offset!");

// Function BattlePassScreen.BattlePassScreen_C.HandleViewReward
// 0x0088 (0x0088 - 0x0000)
struct BattlePassScreen_C_HandleViewReward final
{
public:
	bool                                          bInNoReward;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InNumRewardsToPurchase;                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class USimpleFeatured_YellowButton_C*         K2Node_DynamicCast_AsSimple_Featured_Yellow_Button; // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0020(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0060(0x0010)(ZeroConstructor, ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0070(0x0018)()
};
static_assert(alignof(BattlePassScreen_C_HandleViewReward) == 0x000008, "Wrong alignment on BattlePassScreen_C_HandleViewReward");
static_assert(sizeof(BattlePassScreen_C_HandleViewReward) == 0x000088, "Wrong size on BattlePassScreen_C_HandleViewReward");
static_assert(offsetof(BattlePassScreen_C_HandleViewReward, bInNoReward) == 0x000000, "Member 'BattlePassScreen_C_HandleViewReward::bInNoReward' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleViewReward, InNumRewardsToPurchase) == 0x000004, "Member 'BattlePassScreen_C_HandleViewReward::InNumRewardsToPurchase' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleViewReward, Temp_bool_Variable) == 0x000008, "Member 'BattlePassScreen_C_HandleViewReward::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleViewReward, Temp_byte_Variable) == 0x000009, "Member 'BattlePassScreen_C_HandleViewReward::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleViewReward, Temp_byte_Variable_1) == 0x00000A, "Member 'BattlePassScreen_C_HandleViewReward::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleViewReward, K2Node_DynamicCast_AsSimple_Featured_Yellow_Button) == 0x000010, "Member 'BattlePassScreen_C_HandleViewReward::K2Node_DynamicCast_AsSimple_Featured_Yellow_Button' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleViewReward, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BattlePassScreen_C_HandleViewReward::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleViewReward, K2Node_Select_Default) == 0x000019, "Member 'BattlePassScreen_C_HandleViewReward::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleViewReward, K2Node_MakeStruct_FormatArgumentData) == 0x000020, "Member 'BattlePassScreen_C_HandleViewReward::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleViewReward, K2Node_MakeArray_Array) == 0x000060, "Member 'BattlePassScreen_C_HandleViewReward::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleViewReward, CallFunc_Format_ReturnValue) == 0x000070, "Member 'BattlePassScreen_C_HandleViewReward::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function BattlePassScreen.BattlePassScreen_C.HandleOnViewReward
// 0x0088 (0x0088 - 0x0000)
struct BattlePassScreen_C_HandleOnViewReward final
{
public:
	struct FFortRarityItemData                    Rarity;                                            // 0x0000(0x0080)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          bNoReward;                                         // 0x0080(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumRewardsToPurchase;                              // 0x0084(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattlePassScreen_C_HandleOnViewReward) == 0x000008, "Wrong alignment on BattlePassScreen_C_HandleOnViewReward");
static_assert(sizeof(BattlePassScreen_C_HandleOnViewReward) == 0x000088, "Wrong size on BattlePassScreen_C_HandleOnViewReward");
static_assert(offsetof(BattlePassScreen_C_HandleOnViewReward, Rarity) == 0x000000, "Member 'BattlePassScreen_C_HandleOnViewReward::Rarity' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleOnViewReward, bNoReward) == 0x000080, "Member 'BattlePassScreen_C_HandleOnViewReward::bNoReward' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleOnViewReward, NumRewardsToPurchase) == 0x000084, "Member 'BattlePassScreen_C_HandleOnViewReward::NumRewardsToPurchase' has a wrong offset!");

// Function BattlePassScreen.BattlePassScreen_C.OnSetupPurchaseSeasonLevel
// 0x0068 (0x0068 - 0x0000)
struct BattlePassScreen_C_OnSetupPurchaseSeasonLevel final
{
public:
	TMap<int32, class UFortSeasonPassLevelInfo*>  SeasonLevelInfos;                                  // 0x0000(0x0050)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	class UAthenaSeasonItemDefinition*            CurrentSeasonData;                                 // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortSeasonPassLevelInfo*               CurrentLevel;                                      // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxLevelToPurchase;                                // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LevelToBePurchased;                                // 0x0064(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattlePassScreen_C_OnSetupPurchaseSeasonLevel) == 0x000008, "Wrong alignment on BattlePassScreen_C_OnSetupPurchaseSeasonLevel");
static_assert(sizeof(BattlePassScreen_C_OnSetupPurchaseSeasonLevel) == 0x000068, "Wrong size on BattlePassScreen_C_OnSetupPurchaseSeasonLevel");
static_assert(offsetof(BattlePassScreen_C_OnSetupPurchaseSeasonLevel, SeasonLevelInfos) == 0x000000, "Member 'BattlePassScreen_C_OnSetupPurchaseSeasonLevel::SeasonLevelInfos' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_OnSetupPurchaseSeasonLevel, CurrentSeasonData) == 0x000050, "Member 'BattlePassScreen_C_OnSetupPurchaseSeasonLevel::CurrentSeasonData' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_OnSetupPurchaseSeasonLevel, CurrentLevel) == 0x000058, "Member 'BattlePassScreen_C_OnSetupPurchaseSeasonLevel::CurrentLevel' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_OnSetupPurchaseSeasonLevel, MaxLevelToPurchase) == 0x000060, "Member 'BattlePassScreen_C_OnSetupPurchaseSeasonLevel::MaxLevelToPurchase' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_OnSetupPurchaseSeasonLevel, LevelToBePurchased) == 0x000064, "Member 'BattlePassScreen_C_OnSetupPurchaseSeasonLevel::LevelToBePurchased' has a wrong offset!");

// Function BattlePassScreen.BattlePassScreen_C.HandleOnUpdatedVisibleFriendCount
// 0x0008 (0x0008 - 0x0000)
struct BattlePassScreen_C_HandleOnUpdatedVisibleFriendCount final
{
public:
	int32                                         LeftFriendCount;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RightFriendCount;                                  // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattlePassScreen_C_HandleOnUpdatedVisibleFriendCount) == 0x000004, "Wrong alignment on BattlePassScreen_C_HandleOnUpdatedVisibleFriendCount");
static_assert(sizeof(BattlePassScreen_C_HandleOnUpdatedVisibleFriendCount) == 0x000008, "Wrong size on BattlePassScreen_C_HandleOnUpdatedVisibleFriendCount");
static_assert(offsetof(BattlePassScreen_C_HandleOnUpdatedVisibleFriendCount, LeftFriendCount) == 0x000000, "Member 'BattlePassScreen_C_HandleOnUpdatedVisibleFriendCount::LeftFriendCount' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_HandleOnUpdatedVisibleFriendCount, RightFriendCount) == 0x000004, "Member 'BattlePassScreen_C_HandleOnUpdatedVisibleFriendCount::RightFriendCount' has a wrong offset!");

// Function BattlePassScreen.BattlePassScreen_C.OnVariantUpdate
// 0x0008 (0x0008 - 0x0000)
struct BattlePassScreen_C_OnVariantUpdate final
{
public:
	int32                                         CurrentIndex;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalNumVariants;                                  // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattlePassScreen_C_OnVariantUpdate) == 0x000004, "Wrong alignment on BattlePassScreen_C_OnVariantUpdate");
static_assert(sizeof(BattlePassScreen_C_OnVariantUpdate) == 0x000008, "Wrong size on BattlePassScreen_C_OnVariantUpdate");
static_assert(offsetof(BattlePassScreen_C_OnVariantUpdate, CurrentIndex) == 0x000000, "Member 'BattlePassScreen_C_OnVariantUpdate::CurrentIndex' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_OnVariantUpdate, TotalNumVariants) == 0x000004, "Member 'BattlePassScreen_C_OnVariantUpdate::TotalNumVariants' has a wrong offset!");

// Function BattlePassScreen.BattlePassScreen_C.OnBattlePassViewChanged
// 0x0001 (0x0001 - 0x0000)
struct BattlePassScreen_C_OnBattlePassViewChanged final
{
public:
	EBattlePassView                               NewView;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattlePassScreen_C_OnBattlePassViewChanged) == 0x000001, "Wrong alignment on BattlePassScreen_C_OnBattlePassViewChanged");
static_assert(sizeof(BattlePassScreen_C_OnBattlePassViewChanged) == 0x000001, "Wrong size on BattlePassScreen_C_OnBattlePassViewChanged");
static_assert(offsetof(BattlePassScreen_C_OnBattlePassViewChanged, NewView) == 0x000000, "Member 'BattlePassScreen_C_OnBattlePassViewChanged::NewView' has a wrong offset!");

// Function BattlePassScreen.BattlePassScreen_C.OnSetGiftButtonLabel
// 0x0030 (0x0030 - 0x0000)
struct BattlePassScreen_C_OnSetGiftButtonLabel final
{
public:
	class FText                                   MainLabel;                                         // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   PriceText;                                         // 0x0018(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BattlePassScreen_C_OnSetGiftButtonLabel) == 0x000008, "Wrong alignment on BattlePassScreen_C_OnSetGiftButtonLabel");
static_assert(sizeof(BattlePassScreen_C_OnSetGiftButtonLabel) == 0x000030, "Wrong size on BattlePassScreen_C_OnSetGiftButtonLabel");
static_assert(offsetof(BattlePassScreen_C_OnSetGiftButtonLabel, MainLabel) == 0x000000, "Member 'BattlePassScreen_C_OnSetGiftButtonLabel::MainLabel' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_OnSetGiftButtonLabel, PriceText) == 0x000018, "Member 'BattlePassScreen_C_OnSetGiftButtonLabel::PriceText' has a wrong offset!");

// Function BattlePassScreen.BattlePassScreen_C.OnSetPurchasedAnnualPass
// 0x0001 (0x0001 - 0x0000)
struct BattlePassScreen_C_OnSetPurchasedAnnualPass final
{
public:
	bool                                          bIsPurchased;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattlePassScreen_C_OnSetPurchasedAnnualPass) == 0x000001, "Wrong alignment on BattlePassScreen_C_OnSetPurchasedAnnualPass");
static_assert(sizeof(BattlePassScreen_C_OnSetPurchasedAnnualPass) == 0x000001, "Wrong size on BattlePassScreen_C_OnSetPurchasedAnnualPass");
static_assert(offsetof(BattlePassScreen_C_OnSetPurchasedAnnualPass, bIsPurchased) == 0x000000, "Member 'BattlePassScreen_C_OnSetPurchasedAnnualPass::bIsPurchased' has a wrong offset!");

// Function BattlePassScreen.BattlePassScreen_C.ExecuteUbergraph_BattlePassScreen
// 0x02B8 (0x02B8 - 0x0000)
struct BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable_1;        // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortRarityItemData                    K2Node_Event_Rarity;                               // 0x0028(0x0080)()
	bool                                          K2Node_Event_bNoReward;                            // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_NumRewardsToPurchase;                 // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<int32, class UFortSeasonPassLevelInfo*>  K2Node_Event_SeasonLevelInfos;                     // 0x00B0(0x0050)(ConstParm, ZeroConstructor)
	class UAthenaSeasonItemDefinition*            K2Node_Event_CurrentSeasonData;                    // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortSeasonPassLevelInfo*               K2Node_Event_CurrentLevel;                         // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_MaxLevelToPurchase;                   // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_LevelToBePurchased;                   // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_LeftFriendCount;                      // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_RightFriendCount;                     // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAthenaSeasonLevelConfirmationScreen_C* CallFunc_Create_ReturnValue;                       // 0x0128(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue_1;            // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAthenaSeasonAboutWidget_C*             CallFunc_Create_ReturnValue_1;                     // 0x0138(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue_2;            // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBattlePassViewRewardsScreen_C*         CallFunc_Create_ReturnValue_2;                     // 0x0148(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_CurrentIndex;                         // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_TotalNumVariants;                     // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0160(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A1[0x3];                                      // 0x01A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x01A8(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x01E8(0x0010)(ZeroConstructor, ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x01F8(0x0018)()
	bool                                          Temp_bool_Variable_1;                              // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EBattlePassView                               K2Node_Event_NewView;                              // 0x0211(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0212(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_213[0x5];                                      // 0x0213(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortRuntimeOptions*                    CallFunc_GetRuntimeOptions_ReturnValue;            // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USimpleFeatured_YellowButton_C*         K2Node_DynamicCast_AsSimple_Featured_Yellow_Button; // 0x0220(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0229(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22A[0x6];                                      // 0x022A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_MainLabel;                            // 0x0230(0x0018)(ConstParm)
	class FText                                   K2Node_Event_PriceText;                            // 0x0248(0x0018)(ConstParm)
	TArray<class AVaultWorld_C*>                  CallFunc_GetAllActorsOfClass_OutActors;            // 0x0260(0x0010)(ZeroConstructor, ReferenceParm)
	TArray<class AFrontendCamera_VaultRotator_C*> CallFunc_GetAllActorsOfClass_OutActors_1;          // 0x0270(0x0010)(ZeroConstructor, ReferenceParm)
	class AVaultWorld_C*                          CallFunc_Array_Get_Item;                           // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFrontendCamera_VaultRotator_C*         CallFunc_Array_Get_Item_1;                         // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AVaultRotator_C*                        CallFunc_GetVaultRotator_VaultRotator;             // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ActorHasTag_ReturnValue;                  // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ActorHasTag_ReturnValue_1;                // 0x0299(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29A[0x2];                                      // 0x029A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x029C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x02A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x02A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x02A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x02AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x02AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x02AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsPurchased;                         // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x02B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen) == 0x000008, "Wrong alignment on BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen");
static_assert(sizeof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen) == 0x0002B8, "Wrong size on BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, EntryPoint) == 0x000000, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::EntryPoint' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, Temp_byte_Variable) == 0x000004, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, Temp_bool_Variable) == 0x000005, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, Temp_byte_Variable_1) == 0x000006, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, Temp_byte_Variable_2) == 0x000007, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, Temp_bool_True_if_break_was_hit_Variable) == 0x00000C, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, CallFunc_Not_PreBool_ReturnValue) == 0x00000D, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, Temp_byte_Variable_3) == 0x00000E, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, Temp_bool_True_if_break_was_hit_Variable_1) == 0x000018, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::Temp_bool_True_if_break_was_hit_Variable_1' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, Temp_int_Array_Index_Variable_1) == 0x00001C, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, CallFunc_Not_PreBool_ReturnValue_1) == 0x000020, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, K2Node_Event_Rarity) == 0x000028, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::K2Node_Event_Rarity' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, K2Node_Event_bNoReward) == 0x0000A8, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::K2Node_Event_bNoReward' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, K2Node_Event_NumRewardsToPurchase) == 0x0000AC, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::K2Node_Event_NumRewardsToPurchase' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, K2Node_Event_SeasonLevelInfos) == 0x0000B0, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::K2Node_Event_SeasonLevelInfos' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, K2Node_Event_CurrentSeasonData) == 0x000100, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::K2Node_Event_CurrentSeasonData' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, K2Node_Event_CurrentLevel) == 0x000108, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::K2Node_Event_CurrentLevel' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, K2Node_Event_MaxLevelToPurchase) == 0x000110, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::K2Node_Event_MaxLevelToPurchase' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, K2Node_Event_LevelToBePurchased) == 0x000114, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::K2Node_Event_LevelToBePurchased' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, CallFunc_GetOwningPlayer_ReturnValue) == 0x000118, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, K2Node_Event_LeftFriendCount) == 0x000120, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::K2Node_Event_LeftFriendCount' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, K2Node_Event_RightFriendCount) == 0x000124, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::K2Node_Event_RightFriendCount' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, CallFunc_Create_ReturnValue) == 0x000128, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, CallFunc_GetOwningPlayer_ReturnValue_1) == 0x000130, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::CallFunc_GetOwningPlayer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, CallFunc_Create_ReturnValue_1) == 0x000138, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::CallFunc_Create_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, CallFunc_GetOwningPlayer_ReturnValue_2) == 0x000140, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::CallFunc_GetOwningPlayer_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, CallFunc_Create_ReturnValue_2) == 0x000148, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::CallFunc_Create_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, K2Node_Event_CurrentIndex) == 0x000150, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::K2Node_Event_CurrentIndex' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, K2Node_Event_TotalNumVariants) == 0x000154, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::K2Node_Event_TotalNumVariants' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, CallFunc_PlayAnimation_ReturnValue) == 0x000158, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, K2Node_MakeStruct_FormatArgumentData) == 0x000160, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, CallFunc_Greater_IntInt_ReturnValue) == 0x0001A0, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, CallFunc_Add_IntInt_ReturnValue_1) == 0x0001A4, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, K2Node_MakeStruct_FormatArgumentData_1) == 0x0001A8, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, K2Node_MakeArray_Array) == 0x0001E8, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, CallFunc_Format_ReturnValue) == 0x0001F8, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, Temp_bool_Variable_1) == 0x000210, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, K2Node_Event_NewView) == 0x000211, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::K2Node_Event_NewView' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, K2Node_SwitchEnum_CmpSuccess) == 0x000212, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, CallFunc_GetRuntimeOptions_ReturnValue) == 0x000218, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::CallFunc_GetRuntimeOptions_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, K2Node_DynamicCast_AsSimple_Featured_Yellow_Button) == 0x000220, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::K2Node_DynamicCast_AsSimple_Featured_Yellow_Button' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, K2Node_DynamicCast_bSuccess) == 0x000228, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, K2Node_Select_Default) == 0x000229, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, K2Node_Event_MainLabel) == 0x000230, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::K2Node_Event_MainLabel' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, K2Node_Event_PriceText) == 0x000248, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::K2Node_Event_PriceText' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, CallFunc_GetAllActorsOfClass_OutActors) == 0x000260, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, CallFunc_GetAllActorsOfClass_OutActors_1) == 0x000270, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::CallFunc_GetAllActorsOfClass_OutActors_1' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, CallFunc_Array_Get_Item) == 0x000280, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, CallFunc_Array_Get_Item_1) == 0x000288, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, CallFunc_GetVaultRotator_VaultRotator) == 0x000290, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::CallFunc_GetVaultRotator_VaultRotator' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, CallFunc_ActorHasTag_ReturnValue) == 0x000298, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::CallFunc_ActorHasTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, CallFunc_ActorHasTag_ReturnValue_1) == 0x000299, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::CallFunc_ActorHasTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, CallFunc_Array_Length_ReturnValue) == 0x00029C, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, CallFunc_Array_Length_ReturnValue_1) == 0x0002A0, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, Temp_int_Loop_Counter_Variable_1) == 0x0002A4, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, CallFunc_Less_IntInt_ReturnValue) == 0x0002A8, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, CallFunc_BooleanAND_ReturnValue) == 0x0002A9, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, CallFunc_Less_IntInt_ReturnValue_1) == 0x0002AA, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, CallFunc_BooleanAND_ReturnValue_1) == 0x0002AB, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, CallFunc_Add_IntInt_ReturnValue_2) == 0x0002AC, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, K2Node_Event_bIsPurchased) == 0x0002B0, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::K2Node_Event_bIsPurchased' has a wrong offset!");
static_assert(offsetof(BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen, K2Node_Select_Default_1) == 0x0002B1, "Member 'BattlePassScreen_C_ExecuteUbergraph_BattlePassScreen::K2Node_Select_Default_1' has a wrong offset!");

}

