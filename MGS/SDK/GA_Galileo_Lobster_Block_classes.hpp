#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Galileo_Lobster_Block

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_Galileo_Lobster_Block.GA_Galileo_Lobster_Block_C
// 0x0068 (0x0A98 - 0x0A30)
class UGA_Galileo_Lobster_Block_C final : public UFortGameplayAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0A30(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0A38(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AB_Athena_Galileo_Lobster_Parent_C*     BP_LobsterWeapon;                                  // 0x0A40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AB_Galileo_Lobster_Block_Collision_C*   BP_BlockCollisionActor;                            // 0x0A48(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_Blocking;                                       // 0x0A50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ActorClass_BlockCollision;                         // 0x0A58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlockStartTime;                                    // 0x0A60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinBlockDuration;                                  // 0x0A64(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlockCollisionActorAttachZOffset;                  // 0x0A68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlockCollisionActorAttachXOffset;                  // 0x0A6C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           T_DodgeEvent;                                      // 0x0A70(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           EndAbilityTimerHandle;                             // 0x0A78(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          HasBlockCollision;                                 // 0x0A80(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          WasBlockCollisionHit;                              // 0x0A81(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          BlockInputReleased;                                // 0x0A82(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A83[0x1];                                      // 0x0A83(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveGameplayEffectHandle            BlockingEffectHandle;                              // 0x0A84(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           T_JumpPressedEvent;                                // 0x0A8C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_GA_Galileo_Lobster_Block(int32 EntryPoint);
	void K2_ActivateAbility();
	void K2_OnEndAbility(bool bWasCancelled);
	void OnAbilityInputReleased();
	void EventReceived_69CA5C6C46EED6C8408F07BCF8110743(const struct FGameplayEventData& Payload);
	void EventReceived_6B79BEA741F2CA05FAC8DDA5DF319A8D(const struct FGameplayEventData& Payload);
	void Added_0D7B4D884AAC5BCEA71DB8B8D72F8E0F();
	void Added_A761FA0941B5F4959784779712C6BDFE();
	void Added_780D67FC49A19F7FA016BE90FC5831D8();
	void Added_5FCDDEE7446047F8942B6083274BB65F();
	void Added_CDFF4D1740585E98F2BF98BA87597AB9();
	void Added_4A5A6EF945595D500D1BB2AFE39B8739();
	void Added_9034B1574A61C0C8F7C9CCA067665014();
	void InitAbility();
	void EnableBlockingCollision();
	void EndAbilityCleanup();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Galileo_Lobster_Block_C">();
	}
	static class UGA_Galileo_Lobster_Block_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Galileo_Lobster_Block_C>();
	}
};
static_assert(alignof(UGA_Galileo_Lobster_Block_C) == 0x000008, "Wrong alignment on UGA_Galileo_Lobster_Block_C");
static_assert(sizeof(UGA_Galileo_Lobster_Block_C) == 0x000A98, "Wrong size on UGA_Galileo_Lobster_Block_C");
static_assert(offsetof(UGA_Galileo_Lobster_Block_C, UberGraphFrame) == 0x000A30, "Member 'UGA_Galileo_Lobster_Block_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_Galileo_Lobster_Block_C, PlayerPawn) == 0x000A38, "Member 'UGA_Galileo_Lobster_Block_C::PlayerPawn' has a wrong offset!");
static_assert(offsetof(UGA_Galileo_Lobster_Block_C, BP_LobsterWeapon) == 0x000A40, "Member 'UGA_Galileo_Lobster_Block_C::BP_LobsterWeapon' has a wrong offset!");
static_assert(offsetof(UGA_Galileo_Lobster_Block_C, BP_BlockCollisionActor) == 0x000A48, "Member 'UGA_Galileo_Lobster_Block_C::BP_BlockCollisionActor' has a wrong offset!");
static_assert(offsetof(UGA_Galileo_Lobster_Block_C, GE_Blocking) == 0x000A50, "Member 'UGA_Galileo_Lobster_Block_C::GE_Blocking' has a wrong offset!");
static_assert(offsetof(UGA_Galileo_Lobster_Block_C, ActorClass_BlockCollision) == 0x000A58, "Member 'UGA_Galileo_Lobster_Block_C::ActorClass_BlockCollision' has a wrong offset!");
static_assert(offsetof(UGA_Galileo_Lobster_Block_C, BlockStartTime) == 0x000A60, "Member 'UGA_Galileo_Lobster_Block_C::BlockStartTime' has a wrong offset!");
static_assert(offsetof(UGA_Galileo_Lobster_Block_C, MinBlockDuration) == 0x000A64, "Member 'UGA_Galileo_Lobster_Block_C::MinBlockDuration' has a wrong offset!");
static_assert(offsetof(UGA_Galileo_Lobster_Block_C, BlockCollisionActorAttachZOffset) == 0x000A68, "Member 'UGA_Galileo_Lobster_Block_C::BlockCollisionActorAttachZOffset' has a wrong offset!");
static_assert(offsetof(UGA_Galileo_Lobster_Block_C, BlockCollisionActorAttachXOffset) == 0x000A6C, "Member 'UGA_Galileo_Lobster_Block_C::BlockCollisionActorAttachXOffset' has a wrong offset!");
static_assert(offsetof(UGA_Galileo_Lobster_Block_C, T_DodgeEvent) == 0x000A70, "Member 'UGA_Galileo_Lobster_Block_C::T_DodgeEvent' has a wrong offset!");
static_assert(offsetof(UGA_Galileo_Lobster_Block_C, EndAbilityTimerHandle) == 0x000A78, "Member 'UGA_Galileo_Lobster_Block_C::EndAbilityTimerHandle' has a wrong offset!");
static_assert(offsetof(UGA_Galileo_Lobster_Block_C, HasBlockCollision) == 0x000A80, "Member 'UGA_Galileo_Lobster_Block_C::HasBlockCollision' has a wrong offset!");
static_assert(offsetof(UGA_Galileo_Lobster_Block_C, WasBlockCollisionHit) == 0x000A81, "Member 'UGA_Galileo_Lobster_Block_C::WasBlockCollisionHit' has a wrong offset!");
static_assert(offsetof(UGA_Galileo_Lobster_Block_C, BlockInputReleased) == 0x000A82, "Member 'UGA_Galileo_Lobster_Block_C::BlockInputReleased' has a wrong offset!");
static_assert(offsetof(UGA_Galileo_Lobster_Block_C, BlockingEffectHandle) == 0x000A84, "Member 'UGA_Galileo_Lobster_Block_C::BlockingEffectHandle' has a wrong offset!");
static_assert(offsetof(UGA_Galileo_Lobster_Block_C, T_JumpPressedEvent) == 0x000A8C, "Member 'UGA_Galileo_Lobster_Block_C::T_JumpPressedEvent' has a wrong offset!");

}

